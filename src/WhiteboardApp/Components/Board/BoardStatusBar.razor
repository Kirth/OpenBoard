@using Microsoft.AspNetCore.SignalR.Client
@using WhiteboardApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using WhiteboardApp.Models

<div class="status-bar">
    <div class="status-left">
        <a href="/" class="home-btn" title="Back to Home">
            <span class="home-icon">¬´</span>
        </a>
        <div class="board-menu-container">
            <button class="board-menu-trigger" @onclick="ToggleBoardMenu" @onclick:stopPropagation="true">
                <span class="board-title">@BoardName</span>
                <span class="dropdown-arrow">‚ñº</span>
            </button>
            <div class="board-menu @(showBoardMenu ? "show" : "")" @onclick:stopPropagation="true">
                <!-- Board Information Section -->
                <div class="board-menu-section">
                    <div class="board-menu-section-title">Board Information</div>
                    <div class="board-menu-item" @onclick="ShowBoardInfo">
                        <span class="menu-icon">‚ÑπÔ∏è</span>
                        View Details
                    </div>
                </div>
                
                <!-- Board Management Section - Only for Board Owners -->
                @if (currentUser != null && isOwner)
                {
                    <div class="board-menu-section">
                        <div class="board-menu-section-title">Board Management</div>
                        <div class="board-menu-item" @onclick="ShowBoardSettings">
                            <span class="menu-icon">‚öôÔ∏è</span>
                            Board Settings
                        </div>
                        <div class="board-menu-item" @onclick="ShowCollaboratorManagement">
                            <span class="menu-icon">üë•</span>
                            Manage Collaborators
                        </div>
                    </div>
                }
                
                <!-- Board Actions Section -->
                <div class="board-menu-section">
                    <div class="board-menu-section-title">Board Actions</div>
                    <div class="board-menu-item" @onclick="OnDuplicateBoardFromMenu">
                        <span class="menu-icon">üìã</span>
                        Duplicate Board
                    </div>
                    @if (currentUser != null && isOwner)
                    {
                        <div class="board-menu-item danger" @onclick="ShowClearConfirmation">
                            <span class="menu-icon">üóëÔ∏è</span>
                            Clear Board
                        </div>
                    }
                </div>

                <!-- Export Section -->
                <div class="board-menu-section">
                    <div class="board-menu-section-title">Export Options</div>
                    <div class="board-menu-item" @onclick="ExportAsPngFromMenu">
                        <span class="menu-icon">üñºÔ∏è</span>
                        Export as PNG
                    </div>
                    <div class="board-menu-item" @onclick="ExportAsPdfFromMenu">
                        <span class="menu-icon">üìÑ</span>
                        Export as PDF
                    </div>
                    <div class="board-menu-item" @onclick="ExportAsHighResPngFromMenu">
                        <span class="menu-icon">üéØ</span>
                        Export HD PNG
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="status-right">
        <UserMenu />
        <UserPresenceIndicator BoardId="@BoardId" 
                              CurrentUserName="@GetCurrentUserDisplayName()" />
        <button class="theme-toggle-btn" @onclick="ToggleTheme" @onclick:stopPropagation="true" title="Toggle Dark Mode (Ctrl+Shift+D)">
            <span class="theme-icon" id="theme-icon">üåô</span>
        </button>
        <span class="connection-status @(IsConnected ? "connected" : "disconnected")">
            <span class="status-dot"></span>
            @(IsConnected ? "Connected" : "Local Mode")
        </span>
    </div>
</div>

<!-- Board Info Modal -->
@if (showBoardInfoModal && boardStats != null)
{
    <div class="modal" @onclick="HideBoardInfoModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Board Information</h3>
                <button class="modal-close" @onclick="HideBoardInfoModal">&times;</button>
            </div>
            
            <div class="modal-body">
                <div class="board-info-section">
                    <h4>Board Details</h4>
                    <div class="info-row">
                        <span class="info-label">Name:</span>
                        <span class="info-value">@boardStats.BoardName</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Created:</span>
                        <span class="info-value">@boardStats.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Last Modified:</span>
                        <span class="info-value">@boardStats.UpdatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Visibility:</span>
                        <span class="info-value">@GetBoardAccessLevelDisplay(boardStats)</span>
                    </div>
                    @if (boardStats.HasAdminPin)
                    {
                        <div class="info-row">
                            <span class="info-label">Admin Protected:</span>
                            <span class="info-value">Yes</span>
                        </div>
                    }
                </div>
                
                <div class="board-info-section">
                    <h4>Content Statistics</h4>
                    <div class="info-row">
                        <span class="info-label">Total Elements:</span>
                        <span class="info-value">@boardStats.TotalElements</span>
                    </div>
                    @if (boardStats.ElementsByType.Any())
                    {
                        @foreach (var elementType in boardStats.ElementsByType.OrderByDescending(kvp => kvp.Value))
                        {
                            <div class="info-row">
                                <span class="info-label">@elementType.Key:</span>
                                <span class="info-value">@elementType.Value</span>
                            </div>
                        }
                    }
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideBoardInfoModal">Close</button>
            </div>
        </div>
    </div>
}

<!-- Clear Board Confirmation Modal -->
@if (showClearConfirmModal)
{
    <div class="modal" @onclick="HideClearConfirmModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Clear Board</h3>
                <button class="modal-close" @onclick="HideClearConfirmModal">&times;</button>
            </div>
            
            <div class="modal-body">
                <p><strong>Warning:</strong> This will permanently delete all elements on this board.</p>
                <p>To confirm, please type the exact board name: <strong>@BoardName</strong></p>
                <div class="form-group">
                    <input type="text" class="form-control" @bind="confirmationBoardName" @bind:event="oninput" 
                           placeholder="Enter board name to confirm" autocomplete="off" />
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideClearConfirmModal">Cancel</button>
                <button class="btn btn-danger" @onclick="ConfirmClearBoard" disabled="@(!IsConfirmationValid)">Clear Board</button>
            </div>
        </div>
    </div>
}

<!-- Duplicate Board Modal -->
@if (showDuplicateModal)
{
    <div class="modal" @onclick="HideDuplicateModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Duplicate Board</h3>
                <button class="modal-close" @onclick="HideDuplicateModal">&times;</button>
            </div>
            
            <div class="modal-body">
                <p>Create a copy of this board with all its content.</p>
                <div class="form-group">
                    <label>New Board Name</label>
                    <input type="text" class="form-control" @bind="newBoardName" @bind:event="oninput" 
                           placeholder="Enter name for the new board" autocomplete="off" />
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideDuplicateModal">Cancel</button>
                <button class="btn btn-primary" @onclick="ConfirmDuplicateBoard" disabled="@(!IsNewBoardNameValid)">Duplicate Board</button>
            </div>
        </div>
    </div>
}

<!-- Board Settings Modal -->
<BoardSettingsModal IsVisible="@showBoardSettingsModal" 
                   BoardId="@BoardId" 
                   OnClose="HideBoardSettingsModal"
                   OnSettingsSaved="OnBoardSettingsChanged" />

<!-- Collaborator Management Modal -->
<CollaboratorManagementModal IsVisible="@showCollaboratorModal" 
                            BoardId="@BoardId" 
                            OnClose="HideCollaboratorModal"
                            OnCollaboratorsChanged="OnCollaboratorsChanged" />

@inject IJSRuntime JSRuntime
@inject BoardService BoardService
@inject ExportService ExportService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    [Parameter] public string BoardName { get; set; } = string.Empty;
    [Parameter] public string BoardId { get; set; } = string.Empty;
    [Parameter] public bool IsConnected { get; set; } = false;
    [Parameter] public EventCallback OnClearBoard { get; set; }
    [Parameter] public EventCallback<string> OnDuplicateBoard { get; set; }

    private bool showBoardMenu = false;
    private bool showBoardInfoModal = false;
    private bool showClearConfirmModal = false;
    private bool showDuplicateModal = false;
    private bool showBoardSettingsModal = false;
    private bool showCollaboratorModal = false;
    private BoardStats? boardStats = null;
    private string confirmationBoardName = string.Empty;
    private string newBoardName = string.Empty;
    private User? currentUser = null;
    private bool isOwner = false;

    private void ToggleBoardMenu()
    {
        showBoardMenu = !showBoardMenu;
    }

    private async Task ShowBoardInfo()
    {
        showBoardMenu = false;
        try
        {
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                boardStats = await BoardService.GetBoardStatsAsync(boardGuid);
                showBoardInfoModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading board stats: {ex.Message}");
        }
    }

    private void HideBoardInfoModal()
    {
        showBoardInfoModal = false;
        boardStats = null;
    }

    private void ShowClearConfirmation()
    {
        showBoardMenu = false;
        
        // Double-check permissions before showing clear confirmation
        if (currentUser != null && isOwner)
        {
            showClearConfirmModal = true;
        }
        else
        {
            Console.WriteLine("Access denied: User is not the board owner");
        }
    }

    private void HideClearConfirmModal()
    {
        showClearConfirmModal = false;
        confirmationBoardName = string.Empty;
    }

    private bool IsConfirmationValid => string.Equals(confirmationBoardName.Trim(), BoardName.Trim(), StringComparison.Ordinal);

    private async Task ConfirmClearBoard()
    {
        if (!IsConfirmationValid)
            return;
            
        showClearConfirmModal = false;
        confirmationBoardName = string.Empty;
        await OnClearBoard.InvokeAsync();
    }

    private async Task ToggleTheme()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("toggleDarkMode");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling theme: {ex.Message}");
        }
    }

    private void OnDuplicateBoardFromMenu()
    {
        showBoardMenu = false;
        ShowDuplicateModal();
    }

    private void ShowDuplicateModal()
    {
        newBoardName = $"Copy of {BoardName}";
        showDuplicateModal = true;
    }

    private void HideDuplicateModal()
    {
        showDuplicateModal = false;
        newBoardName = string.Empty;
    }

    private bool IsNewBoardNameValid => !string.IsNullOrWhiteSpace(newBoardName.Trim());

    private async Task ConfirmDuplicateBoard()
    {
        if (!IsNewBoardNameValid)
            return;
            
        showDuplicateModal = false;
        await OnDuplicateBoard.InvokeAsync(newBoardName.Trim());
        newBoardName = string.Empty;
    }

    private async Task ExportAsPngFromMenu()
    {
        showBoardMenu = false;
        try
        {
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                await ExportService.ExportBoardAsPngAsync(boardGuid);
                await JSRuntime.InvokeVoidAsync("showNotification", "Board exported as PNG successfully!", "success");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting PNG: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showNotification", "Failed to export board as PNG", "error");
        }
    }

    private async Task ExportAsPdfFromMenu()
    {
        showBoardMenu = false;
        try
        {
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                await ExportService.ExportBoardAsPdfAsync(boardGuid);
                await JSRuntime.InvokeVoidAsync("showNotification", "Board exported as PDF successfully!", "success");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting PDF: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showNotification", "Failed to export board as PDF", "error");
        }
    }

    private async Task ExportAsHighResPngFromMenu()
    {
        showBoardMenu = false;
        try
        {
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                // Export at 2x resolution
                var board = await BoardService.GetBoardAsync(boardGuid);
                var filename = $"{board?.Name ?? "Board"}_HD_{DateTime.Now:yyyyMMdd_HHmmss}.png";
                await JSRuntime.InvokeVoidAsync("exportHighResPng", filename, 2);
                await JSRuntime.InvokeVoidAsync("showNotification", "Board exported as HD PNG successfully!", "success");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting HD PNG: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showNotification", "Failed to export board as HD PNG", "error");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserAndRole();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload user role when BoardId changes
        if (!string.IsNullOrEmpty(BoardId))
        {
            await LoadCurrentUserAndRole();
        }
    }

    private async Task LoadCurrentUserAndRole()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try
                {
                    currentUser = await UserService.GetOrCreateUserAsync(authState.User);
                    Console.WriteLine($"[BoardStatusBar] Loaded authenticated user: {currentUser?.DisplayName}");
                }
                catch (Exception userEx)
                {
                    Console.WriteLine($"[BoardStatusBar] Error loading authenticated user: {userEx.Message}");
                    // Fall back to anonymous user for authenticated sessions with issues
                    currentUser = await UserService.GetAnonymousUserAsync();
                    currentUser.DisplayName = $"Guest-{DateTime.UtcNow.Ticks % 10000}";
                }
                
                // Check if user is owner of this board
                if (Guid.TryParse(BoardId, out var boardGuid) && currentUser != null)
                {
                    var board = await BoardService.GetBoardAsync(boardGuid);
                    isOwner = board != null && board.OwnerId == currentUser.Id;
                }
            }
            else
            {
                // For unauthenticated users, create a guest user
                Console.WriteLine("[BoardStatusBar] User not authenticated, creating guest user");
                currentUser = await UserService.GetAnonymousUserAsync();
                currentUser.DisplayName = $"Guest-{DateTime.UtcNow.Ticks % 10000}";
                isOwner = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[BoardStatusBar] Error loading user role: {ex.Message}");
            // Final fallback - create a basic guest user
            currentUser = new User 
            { 
                DisplayName = $"Guest-{DateTime.UtcNow.Ticks % 10000}",
                Username = "guest"
            };
            isOwner = false;
        }
    }

    private string GetCurrentUserDisplayName()
    {
        if (currentUser?.DisplayName != null && !string.IsNullOrWhiteSpace(currentUser.DisplayName))
        {
            return currentUser.DisplayName;
        }
        
        if (currentUser?.Username != null && !string.IsNullOrWhiteSpace(currentUser.Username))
        {
            return currentUser.Username;
        }
        
        if (currentUser?.Email != null && !string.IsNullOrWhiteSpace(currentUser.Email))
        {
            return currentUser.Email.Split('@')[0];
        }
        
        // Generate a guest name if all else fails
        return $"Guest-{DateTime.UtcNow.Ticks % 10000}";
    }

    private void ShowBoardSettings()
    {
        showBoardMenu = false;
        
        // Double-check permissions before opening modal
        if (currentUser != null && isOwner)
        {
            showBoardSettingsModal = true;
        }
        else
        {
            Console.WriteLine("Access denied: User is not the board owner");
        }
    }

    private void HideBoardSettingsModal()
    {
        showBoardSettingsModal = false;
    }

    private async Task OnBoardSettingsChanged()
    {
        // Optionally refresh board data or notify parent component
        // This could trigger a board name refresh in the parent component
        StateHasChanged();
    }

    private void ShowCollaboratorManagement()
    {
        showBoardMenu = false;
        
        // Double-check permissions before opening modal
        if (currentUser != null && isOwner)
        {
            showCollaboratorModal = true;
        }
        else
        {
            Console.WriteLine("Access denied: User is not the board owner");
        }
    }

    private void HideCollaboratorModal()
    {
        showCollaboratorModal = false;
    }

    private async Task OnCollaboratorsChanged()
    {
        // Optionally refresh board data or notify parent component
        StateHasChanged();
    }

    private string GetBoardAccessLevelDisplay(BoardStats boardStats)
    {
        return boardStats.AccessLevel switch
        {
            BoardAccessLevel.Private => "Private",
            BoardAccessLevel.Unlisted => "Unlisted", 
            BoardAccessLevel.Public => "Public",
            _ => "Unknown"
        };
    }
}