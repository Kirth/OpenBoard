@page "/board/{BoardId}"
@using Microsoft.AspNetCore.SignalR.Client
@using WhiteboardApp.Services
@using WhiteboardApp.Models
@using System.Text.Json
@inject BoardService BoardService
@inject ElementService ElementService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Whiteboard - @boardName</PageTitle>

<div class="board-container">
    <div class="toolbar">
        <div class="btn-group me-3" role="group">
            <button class="btn btn-outline-primary @(currentTool == "select" ? "active" : "")" @onclick="@(() => SetTool("select"))">
                ‚úã Select
            </button>
            <button class="btn btn-outline-primary @(currentTool == "pen" ? "active" : "")" @onclick="@(() => SetTool("pen"))">
                ‚úèÔ∏è Pen
            </button>
            <button class="btn btn-outline-primary @(currentTool == "text" ? "active" : "")" @onclick="@(() => SetTool("text"))">
                üìù Text
            </button>
            <button class="btn btn-outline-primary @(currentTool == "rectangle" ? "active" : "")" @onclick="@(() => SetTool("rectangle"))">
                ‚¨ú Rectangle
            </button>
            <button class="btn btn-outline-primary @(currentTool == "circle" ? "active" : "")" @onclick="@(() => SetTool("circle"))">
                ‚≠ï Circle
            </button>
            <button class="btn btn-outline-primary @(currentTool == "sticky" ? "active" : "")" @onclick="@(() => SetTool("sticky"))">
                üóíÔ∏è Sticky
            </button>
        </div>
        
        <button class="btn btn-outline-danger me-3" @onclick="ClearBoard">
            üóëÔ∏è Clear
        </button>
        
        <span class="badge bg-@(signalRConnected ? "success" : "warning")">
            @(signalRConnected ? "Connected" : "Local Mode")
        </span>
    </div>
    
    <div class="canvas-container">
        <canvas @ref="canvasElement" 
                id="drawingCanvas" 
                width="1200" 
                height="800">
        </canvas>
    </div>
</div>

@code {
    [Parameter] public string BoardId { get; set; } = "";
    
    private ElementReference canvasElement;
    private string currentTool = "pen";
    private string boardName = "Loading...";
    private bool signalRConnected = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Load board info
        if (Guid.TryParse(BoardId, out var boardGuid))
        {
            var board = await BoardService.GetBoardAsync(boardGuid);
            boardName = board?.Name ?? "Unknown Board";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize canvas first
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeCanvas");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Canvas initialization failed: {ex.Message}");
                return;
            }

            // Initialize SignalR using JavaScript client (works better in browser)
            try
            {
                var connectionStatus = await JSRuntime.InvokeAsync<string>("initializeSignalR", BoardId);
                signalRConnected = connectionStatus == "Connected";
                StateHasChanged(); // Update the status badge
                
                // Load existing board elements after SignalR connection
                if (signalRConnected)
                {
                    await LoadExistingElements();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SignalR initialization failed: {ex.Message}");
                signalRConnected = false;
            }
        }
    }

    private async Task LoadExistingElements()
    {
        try
        {
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                var elements = await BoardService.GetBoardElementsAsync(boardGuid);
                
                foreach (var element in elements)
                {
                    // Convert the element to the same format as SignalR broadcasts
                    var elementData = new
                    {
                        id = element.Id.ToString(),
                        type = element.Type.ToString(),
                        x = element.X,
                        y = element.Y,
                        width = element.Width,
                        height = element.Height,
                        zIndex = element.ZIndex,
                        data = element.Data?.RootElement.GetRawText(),
                        createdBy = element.CreatedBy
                    };
                    
                    // Render the element on canvas using JavaScript
                    await JSRuntime.InvokeVoidAsync("renderExistingElement", elementData);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load existing elements: {ex.Message}");
        }
    }

    // Mouse event handling is now done in JavaScript

    private void SetTool(string tool)
    {
        currentTool = tool;
        JSRuntime.InvokeVoidAsync("setCurrentTool", tool);
    }

    // Element creation is now handled in JavaScript

    private async Task ClearBoard()
    {
        try
        {
            // Clear all elements from the database
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                var elements = await BoardService.GetBoardElementsAsync(boardGuid);
                foreach (var element in elements)
                {
                    await ElementService.DeleteElementAsync(element.Id);
                }
            }
            
            // Clear canvas and notify via JavaScript
            await JSRuntime.InvokeVoidAsync("clearCanvasFromBlazor");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to clear board: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        // JavaScript SignalR connection will be cleaned up automatically
        await Task.CompletedTask;
    }

    // Selection handling is now done in JavaScript
}

<style>
    .board-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .toolbar {
        padding: 10px;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        gap: 10px;
    }

    .canvas-container {
        flex: 1;
        overflow: hidden;
        position: relative;
    }

    #drawingCanvas {
        border: 1px solid #ccc;
        cursor: crosshair;
        display: block;
    }

    .btn.active {
        background-color: #0056b3 !important;
    }
</style>