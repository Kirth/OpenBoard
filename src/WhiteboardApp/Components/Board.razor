@page "/board/{BoardId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using WhiteboardApp.Services
@using WhiteboardApp.Models
@using System.Text.Json
@inject BoardService BoardService
@inject ElementService ElementService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Whiteboard - @boardName</PageTitle>

<div class="board-container">
    <!-- Status bar at top -->
    <div class="status-bar">
        <div class="board-title">@boardName</div>
        <span class="connection-status @(signalRConnected ? "connected" : "disconnected")">
            <span class="status-dot"></span>
            @(signalRConnected ? "Connected" : "Local Mode")
        </span>
    </div>
    
    <div class="canvas-container">
        <canvas @ref="canvasElement" 
                id="drawingCanvas">
        </canvas>
        @if (hubConnection != null)
        {
            <CursorTracker HubConnection="hubConnection" BoardId="@BoardId" CurrentUserName="@currentUserName" />
        }
    </div>
    
    <!-- Floating toolbar at bottom -->
    <div class="floating-toolbar">
        <div class="toolbar-section">
            <div class="tool-group">
                <button class="tool-btn @(currentTool == "select" ? "active" : "")" @onclick="@(() => SetTool("select"))" title="Select">
                    <span class="tool-icon">‚úã</span>
                </button>
                <button class="tool-btn @(currentTool == "pen" ? "active" : "")" @onclick="@(() => SetTool("pen"))" title="Pen">
                    <span class="tool-icon">‚úèÔ∏è</span>
                </button>
                <button class="tool-btn @(currentTool == "text" ? "active" : "")" @onclick="@(() => SetTool("text"))" title="Text">
                    <span class="tool-icon">üìù</span>
                </button>
                <button class="tool-btn @(currentTool == "rectangle" ? "active" : "")" @onclick="@(() => SetTool("rectangle"))" title="Rectangle">
                    <span class="tool-icon">‚¨ú</span>
                </button>
                <button class="tool-btn @(currentTool == "circle" ? "active" : "")" @onclick="@(() => SetTool("circle"))" title="Circle">
                    <span class="tool-icon">‚≠ï</span>
                </button>
                <button class="tool-btn @(currentTool == "sticky" ? "active" : "")" @onclick="@(() => SetTool("sticky"))" title="Sticky Note">
                    <span class="tool-icon">üü®</span>
                </button>
                <button class="tool-btn @(currentTool == "image" ? "active" : "")" @onclick="@(() => SetTool("image"))" title="Image">
                    <span class="tool-icon">üñºÔ∏è</span>
                </button>
            </div>
        </div>
        
        <div class="toolbar-divider"></div>
        
        <div class="toolbar-section">
            <button class="tool-btn danger" @onclick="ClearBoard" title="Clear Board">
                <span class="tool-icon">üóëÔ∏è</span>
            </button>
        </div>
    </div>
    
    <!-- Context Menu -->
    <div id="contextMenu" class="context-menu" style="display: none;">
        <div class="context-menu-item" onclick="bringSelectedToFront()">
            <div class="context-item-content">
                <span class="context-icon">‚¨ÜÔ∏è</span>
                Bring to Front
            </div>
        </div>
        <div class="context-menu-item" onclick="sendSelectedToBack()">
            <div class="context-item-content">
                <span class="context-icon">‚¨áÔ∏è</span>
                Send to Back
            </div>
        </div>
        <div class="context-menu-divider"></div>
        <!-- Style options for shapes -->
        <div id="styleOptions" class="context-menu-section" style="display: none;">
            <div id="fillColorMenu" class="context-menu-item has-submenu">
                <div class="context-item-content">
                    <span class="context-icon">üé®</span>
                    Fill Color
                </div>
                <div class="submenu color-submenu">
                    <div class="color-option" onclick="updateShapeStyle('fillColor', 'transparent')" style="background: linear-gradient(45deg, #ff0000 25%, transparent 25%, transparent 75%, #ff0000 75%); background-size: 8px 8px;" title="Transparent"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#ffffff')" style="background: #ffffff; border: 1px solid #ccc;" title="White"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#000000')" style="background: #000000;" title="Black"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#ff0000')" style="background: #ff0000;" title="Red"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#00ff00')" style="background: #00ff00;" title="Green"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#0000ff')" style="background: #0000ff;" title="Blue"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#ffff00')" style="background: #ffff00;" title="Yellow"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#ff00ff')" style="background: #ff00ff;" title="Magenta"></div>
                    <div class="color-option" onclick="updateShapeStyle('fillColor', '#00ffff')" style="background: #00ffff;" title="Cyan"></div>
                </div>
            </div>
            <div id="strokeColorMenu" class="context-menu-item has-submenu">
                <div class="context-item-content">
                    <span class="context-icon">üñäÔ∏è</span>
                    Stroke Color
                </div>
                <div class="submenu color-submenu">
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#000000')" style="background: #000000;" title="Black"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#ffffff')" style="background: #ffffff; border: 1px solid #ccc;" title="White"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#ff0000')" style="background: #ff0000;" title="Red"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#00ff00')" style="background: #00ff00;" title="Green"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#0000ff')" style="background: #0000ff;" title="Blue"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#ffff00')" style="background: #ffff00;" title="Yellow"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#ff00ff')" style="background: #ff00ff;" title="Magenta"></div>
                    <div class="color-option" onclick="updateShapeStyle('strokeColor', '#00ffff')" style="background: #00ffff;" title="Cyan"></div>
                </div>
            </div>
            <div id="strokeWidthMenu" class="context-menu-item has-submenu">
                <div class="context-item-content">
                    <span class="context-icon">üìè</span>
                    Stroke Width
                </div>
                <div class="submenu width-submenu">
                    <div class="width-option" onclick="updateShapeStyle('strokeWidth', 1)">
                        <div class="width-preview" style="height: 1px; background: #000;"></div>
                        <span>1px</span>
                    </div>
                    <div class="width-option" onclick="updateShapeStyle('strokeWidth', 2)">
                        <div class="width-preview" style="height: 2px; background: #000;"></div>
                        <span>2px</span>
                    </div>
                    <div class="width-option" onclick="updateShapeStyle('strokeWidth', 4)">
                        <div class="width-preview" style="height: 4px; background: #000;"></div>
                        <span>4px</span>
                    </div>
                    <div class="width-option" onclick="updateShapeStyle('strokeWidth', 6)">
                        <div class="width-preview" style="height: 6px; background: #000;"></div>
                        <span>6px</span>
                    </div>
                    <div class="width-option" onclick="updateShapeStyle('strokeWidth', 8)">
                        <div class="width-preview" style="height: 8px; background: #000;"></div>
                        <span>8px</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="context-menu-divider"></div>
        <div class="context-menu-item" onclick="copySelectedElement()">
            <div class="context-item-content">
                <span class="context-icon">üìÑ</span>
                Copy
            </div>
            <span class="context-hotkey">Ctrl+C</span>
        </div>
        <div class="context-menu-item" onclick="pasteElement()">
            <div class="context-item-content">
                <span class="context-icon">üìã</span>
                Paste
            </div>
            <span class="context-hotkey">Ctrl+V</span>
        </div>
        <div class="context-menu-divider"></div>
        <div class="context-menu-item" onclick="deleteSelectedElement()">
            <div class="context-item-content">
                <span class="context-icon">üóëÔ∏è</span>
                Delete
            </div>
            <span class="context-hotkey">Del</span>
        </div>
    </div>
    
    <!-- Minimap -->
    <div class="minimap-container">
        <canvas id="minimapCanvas" width="200" height="150"></canvas>
        <div class="minimap-viewport"></div>
    </div>
    
    <input type="file" id="imageUpload" accept="image/*" style="display: none;" />
</div>

@code {
    [Parameter] public string BoardId { get; set; } = "";
    
    private ElementReference canvasElement;
    private string currentTool = "select";
    private string boardName = "Loading...";
    private bool signalRConnected = false;
    private HubConnection? hubConnection;
    private string currentUserName = "Anonymous";
    
    protected override async Task OnInitializedAsync()
    {
        // Load board info
        if (Guid.TryParse(BoardId, out var boardGuid))
        {
            var board = await BoardService.GetBoardAsync(boardGuid);
            boardName = board?.Name ?? "Unknown Board";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize canvas first
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeCanvas");
                
                // Set up reference for JavaScript to call back to Blazor
                var dotNetRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("setBlazorReference", dotNetRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Canvas initialization failed: {ex.Message}");
                return;
            }

            // Initialize SignalR using JavaScript client (works better in browser)
            try
            {
                var connectionStatus = await JSRuntime.InvokeAsync<string>("initializeSignalR", BoardId);
                signalRConnected = connectionStatus == "Connected";
                
                // Also initialize C# SignalR connection for cursor tracking
                await InitializeSignalR();
                
                StateHasChanged(); // Update the status badge
                
                // Load existing board elements after SignalR connection
                if (signalRConnected)
                {
                    await LoadExistingElements();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SignalR initialization failed: {ex.Message}");
                signalRConnected = false;
            }
        }
    }

    private async Task LoadExistingElements()
    {
        try
        {
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                var elements = await BoardService.GetBoardElementsAsync(boardGuid);
                
                foreach (var element in elements)
                {
                    // Convert the element to the same format as SignalR broadcasts
                    var elementData = new
                    {
                        id = element.Id.ToString(),
                        type = element.Type.ToString(),
                        x = element.X,
                        y = element.Y,
                        width = element.Width,
                        height = element.Height,
                        zIndex = element.ZIndex,
                        data = element.Data?.RootElement.GetRawText(),
                        createdBy = element.CreatedBy
                    };
                    
                    // Render the element on canvas using JavaScript
                    await JSRuntime.InvokeVoidAsync("renderExistingElement", elementData);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load existing elements: {ex.Message}");
        }
    }

    // Mouse event handling is now done in JavaScript

    private void SetTool(string tool)
    {
        currentTool = tool;
        JSRuntime.InvokeVoidAsync("setCurrentTool", tool);
    }

    [JSInvokable]
    public void UpdateCurrentTool(string tool)
    {
        currentTool = tool;
        StateHasChanged();
    }

    // Element creation is now handled in JavaScript

    private async Task ClearBoard()
    {
        try
        {
            // Clear all elements from the database
            if (Guid.TryParse(BoardId, out var boardGuid))
            {
                var elements = await BoardService.GetBoardElementsAsync(boardGuid);
                foreach (var element in elements)
                {
                    await ElementService.DeleteElementAsync(element.Id);
                }
            }
            
            // Clear canvas and notify via JavaScript
            await JSRuntime.InvokeVoidAsync("clearCanvasFromBlazor");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to clear board: {ex.Message}");
        }
    }

    private async Task InitializeSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/collaborationhub"))
                .WithAutomaticReconnect()
                .Build();

            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinBoard", BoardId, currentUserName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"C# SignalR connection failed: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Selection handling is now done in JavaScript
}

<style>
    .board-container {
        position: relative;
        height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        overflow: hidden;
    }

    /* Status bar at top */
    .status-bar {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 30px;
        z-index: 100;
    }

    .board-title {
        font-size: 18px;
        font-weight: 600;
        color: #2c3e50;
    }

    .connection-status {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        font-weight: 500;
        padding: 6px 12px;
        border-radius: 20px;
        backdrop-filter: blur(5px);
    }

    .connection-status.connected {
        background: rgba(40, 167, 69, 0.1);
        color: #28a745;
        border: 1px solid rgba(40, 167, 69, 0.3);
    }

    .connection-status.disconnected {
        background: rgba(255, 193, 7, 0.1);
        color: #ffc107;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: currentColor;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    /* Canvas container */
    .canvas-container {
        position: absolute;
        top: 60px;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;
    }

    #drawingCanvas {
        width: 100%;
        height: 100%;
        background: white;
        cursor: default;
        display: block;
    }

    /* Floating toolbar at bottom */
    .floating-toolbar {
        position: fixed;
        bottom: 15px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 24px;
        padding: 8px 12px;
        display: flex;
        align-items: center;
        gap: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        z-index: 1000;
        transition: all 0.3s ease;
    }

    .floating-toolbar:hover {
        transform: translateX(-50%) translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    }

    .toolbar-section {
        display: flex;
        align-items: center;
    }

    .tool-group {
        display: flex;
        gap: 4px;
        background: rgba(0, 0, 0, 0.05);
        border-radius: 16px;
        padding: 4px;
    }

    .toolbar-divider {
        width: 1px;
        height: 24px;
        background: rgba(0, 0, 0, 0.1);
    }

    .tool-btn {
        position: relative;
        border: none;
        background: transparent;
        border-radius: 12px;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        color: #64748b;
    }

    .tool-btn:hover {
        background: rgba(0, 0, 0, 0.08);
        color: #334155;
        transform: translateY(-1px);
    }

    .tool-btn.active {
        background: #3b82f6;
        color: white;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        transform: translateY(-1px);
    }

    .tool-btn.danger {
        color: #ef4444;
    }

    .tool-btn.danger:hover {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
    }

    .tool-icon {
        font-size: 18px;
        display: block;
    }

    /* Context Menu */
    .context-menu {
        position: fixed;
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 12px;
        padding: 8px 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        z-index: 2000;
        min-width: 160px;
    }

    .context-menu-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 16px;
        cursor: pointer;
        font-size: 14px;
        color: #374151;
        transition: background-color 0.2s ease, color 0.2s ease;
        box-sizing: border-box;
    }

    .context-menu-item:hover {
        background: rgba(59, 130, 246, 0.1);
        color: #3b82f6;
    }

    .context-menu-divider {
        height: 1px;
        background: rgba(0, 0, 0, 0.1);
        margin: 4px 0;
    }

    .context-icon {
        font-size: 16px;
        width: 20px;
        height: 20px;
        text-align: center;
        display: inline-block;
        line-height: 1;
        box-sizing: border-box;
        flex-shrink: 0;
        vertical-align: middle;
        text-rendering: optimizeSpeed;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        transform: translateZ(0);
        will-change: auto;
    }

    .context-item-content {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .context-hotkey {
        font-size: 12px;
        color: #6b7280;
        font-weight: normal;
    }

    /* Context menu submenu styles */
    .context-menu-item.has-submenu {
        position: relative;
    }

    .submenu {
        display: none;
        position: absolute;
        left: calc(100% + 2px);
        top: 0;
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
        min-width: 150px;
        z-index: 2001;
        padding: 8px;
        pointer-events: auto;
    }

    /* Show submenu when hovering over parent or submenu itself */
    .context-menu-item.has-submenu:hover > .submenu,
    .context-menu-item.has-submenu > .submenu:hover {
        display: block;
    }

    /* Ensure color submenus maintain flex layout when visible */
    .context-menu-item.has-submenu:hover > .color-submenu,
    .context-menu-item.has-submenu > .color-submenu:hover {
        display: flex;
    }

    /* Add invisible bridge to prevent hover break */
    .context-menu-item.has-submenu::after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        width: 10px;
        height: 100%;
        background: transparent;
        pointer-events: auto;
    }

    .color-submenu {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        padding: 8px;
        width: 120px;
    }

    .color-option {
        width: 24px;
        height: 24px;
        border-radius: 4px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s ease;
        box-sizing: border-box;
        flex-shrink: 0;
    }

    .color-option:hover {
        border-color: #3b82f6;
        /* Remove transform to prevent jumping */
    }

    .width-submenu {
        display: flex;
        flex-direction: column;
        gap: 8px;
        padding: 8px;
        width: 100px;
    }

    /* Adjust positioning for different submenus to prevent overlaps */
    #fillColorMenu .submenu {
        top: 0px;
    }

    #strokeColorMenu .submenu {
        top: 40px;
    }

    #strokeWidthMenu .submenu {
        top: 80px;
    }

    .width-option {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 8px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .width-option:hover {
        background: rgba(59, 130, 246, 0.1);
    }

    .width-preview {
        width: 30px;
        border-radius: 2px;
    }

    .width-option span {
        font-size: 12px;
        color: #374151;
        font-weight: 500;
    }

    /* Minimap */
    .minimap-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 200px;
        height: 150px;
        background: rgba(255, 255, 255, 0.25);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        z-index: 1001;
        overflow: hidden;
    }

    #minimapCanvas {
        width: 100%;
        height: 100%;
        cursor: grab;
    }
    
    #minimapCanvas:active {
        cursor: grabbing;
    }

    .minimap-viewport {
        position: absolute;
        border: 2px solid #007bff;
        background: rgba(0, 123, 255, 0.1);
        pointer-events: none;
        min-width: 4px;
        min-height: 4px;
    }

    .zoom-level-display {
        position: absolute;
        bottom: 4px;
        right: 4px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        font-size: 12px;
        font-weight: 600;
        padding: 3px 6px;
        border-radius: 4px;
        font-family: 'Segoe UI', Arial, sans-serif;
        pointer-events: none;
        z-index: 10;
    }

    /* Copy/Paste notifications */
    .copy-paste-notification {
        position: fixed;
        top: 80px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        z-index: 2000;
        animation: slideDown 0.3s ease-out, fadeOut 0.3s ease-in 1.7s forwards;
        pointer-events: none;
    }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .floating-toolbar {
            bottom: 10px;
            left: 10px;
            right: 10px;
            transform: none;
            border-radius: 20px;
            padding: 6px 10px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .toolbar-section {
            flex: 1;
            justify-content: center;
        }

        .tool-btn {
            width: 40px;
            height: 40px;
        }

        .tool-icon {
            font-size: 16px;
        }

        .status-bar {
            padding: 0 20px;
        }

        .board-title {
            font-size: 16px;
        }
    }
</style>