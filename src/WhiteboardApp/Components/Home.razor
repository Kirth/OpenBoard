@page "/"
@using WhiteboardApp.Services
@using WhiteboardApp.Models
@inject BoardService BoardService
@inject NavigationManager Navigation

<PageTitle>OpenBoard</PageTitle>

<div class="home-container">
    <header class="header">
        <h1>OpenBoard</h1>
        <p>Real-time collaborative whiteboard</p>
    </header>
    
    <main class="main">
        <section class="join-section">
            <h2>Join Board</h2>
            <div class="input-group">
                <input type="text" placeholder="Board ID" @bind="boardId" @oninput="ClearError" />
                <button @onclick="JoinBoard" disabled="@string.IsNullOrWhiteSpace(boardId)">Join</button>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
            <div class="quick-actions">
                <button class="link-btn" @onclick="ShowCreateModal">Create new board</button>
            </div>
        </section>

        @if (publicBoards != null && publicBoards.Count > 0)
        {
            <section class="boards-section">
                <h2>Public Boards</h2>
                <div class="boards-list">
                    @foreach (var board in publicBoards)
                    {
                        <div class="board-item" @onclick="@(() => JoinSpecificBoard(board.Id))">
                            <h3>@board.Name</h3>
                            <div class="board-info">
                                <span>@GetStickyCount(board)</span>
                                <span>@FormatDate(board.UpdatedAt)</span>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }
    </main>
</div>

<!-- Create Board Modal -->
@if (showCreateModal)
{
    <div class="modal" @onclick="HideCreateModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Create Board</h3>
            
            <div class="form-group">
                <label>Title</label>
                <input type="text" @bind="newBoardTitle" placeholder="My Board" />
            </div>
            
            <div class="form-group">
                <label>Visibility</label>
                <div class="radio-group">
                    <label>
                        <input type="radio" name="visibility" @onchange="@(() => isPublicBoard = false)" checked="@(!isPublicBoard)" />
                        Unlisted
                    </label>
                    <label>
                        <input type="radio" name="visibility" @onchange="@(() => isPublicBoard = true)" checked="@isPublicBoard" />
                        Public
                    </label>
                </div>
            </div>
            
            <div class="form-group">
                <label>Admin PIN (optional)</label>
                <input type="password" @bind="adminPin" placeholder="Leave empty for none" />
            </div>
            
            <div class="modal-actions">
                <button @onclick="HideCreateModal">Cancel</button>
                <button @onclick="CreateNewBoard" disabled="@string.IsNullOrWhiteSpace(newBoardTitle)" class="primary">Create</button>
            </div>
        </div>
    </div>
}

@code {
    private string boardId = "";
    private string newBoardTitle = "";
    private bool isPublicBoard = false;
    private string adminPin = "";
    private bool showCreateModal = false;
    private string errorMessage = "";
    private List<WhiteboardApp.Models.Board>? publicBoards;

    protected override async Task OnInitializedAsync()
    {
        publicBoards = await BoardService.GetPublicBoardsAsync();
    }

    private async Task CreateNewBoard()
    {
        if (string.IsNullOrWhiteSpace(newBoardTitle))
            return;

        var board = await BoardService.CreateBoardAsync(newBoardTitle.Trim(), isPublicBoard, 
            string.IsNullOrWhiteSpace(adminPin) ? null : adminPin.Trim());
        
        HideCreateModal();
        Navigation.NavigateTo($"/board/{board.Id}");
    }

    private void JoinDefaultBoard()
    {
        Navigation.NavigateTo("/board/11111111-1111-1111-1111-111111111111");
    }

    private async Task JoinBoard()
    {
        if (string.IsNullOrEmpty(boardId))
            return;

        errorMessage = "";
        
        // Validate GUID format
        if (!Guid.TryParse(boardId, out var boardGuid))
        {
            errorMessage = "Invalid board ID format";
            return;
        }

        // Check if board exists
        var board = await BoardService.GetBoardAsync(boardGuid);
        if (board == null)
        {
            errorMessage = "Board not found";
            return;
        }

        Navigation.NavigateTo($"/board/{boardId}");
    }

    private void JoinSpecificBoard(Guid id)
    {
        Navigation.NavigateTo($"/board/{id}");
    }

    private void ShowCreateModal()
    {
        newBoardTitle = "";
        isPublicBoard = false;
        adminPin = "";
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private string FormatDate(DateTime date)
    {
        var timeAgo = DateTime.UtcNow - date;
        if (timeAgo.TotalMinutes < 1) return "now";
        if (timeAgo.TotalHours < 1) return $"{(int)timeAgo.TotalMinutes}m";
        if (timeAgo.TotalDays < 1) return $"{(int)timeAgo.TotalHours}h";
        if (timeAgo.TotalDays < 7) return $"{(int)timeAgo.TotalDays}d";
        return date.ToString("M/d");
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    private string GetStickyCount(WhiteboardApp.Models.Board board)
    {
        var count = board.Elements?.Count ?? 0;
        return count == 1 ? "1 item" : $"{count} items";
    }
}

<style>
    * {
        box-sizing: border-box;
    }

    .home-container {
        min-height: 100vh;
        background: #f8f9fa;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    }

    .header {
        text-align: center;
        padding: 60px 20px 40px;
        background: white;
        border-bottom: 1px solid #e9ecef;
    }

    .header h1 {
        font-size: 2.5rem;
        font-weight: 600;
        color: #212529;
        margin: 0 0 8px 0;
    }

    .header p {
        color: #6c757d;
        margin: 0;
        font-size: 1.1rem;
    }

    .main {
        max-width: 600px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .join-section {
        background: white;
        border-radius: 8px;
        padding: 32px;
        margin-bottom: 40px;
        border: 1px solid #dee2e6;
    }

    .join-section h2 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0 0 20px 0;
        color: #212529;
    }

    .input-group {
        display: flex;
        gap: 8px;
        margin-bottom: 16px;
    }

    .input-group input {
        flex: 1;
        padding: 12px 16px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 1rem;
    }

    .input-group input:focus {
        outline: none;
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .input-group button {
        padding: 12px 24px;
        background: #0d6efd;
        color: white;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
    }

    .input-group button:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }

    .input-group button:hover:not(:disabled) {
        background: #0b5ed7;
    }

    .quick-actions {
        display: flex;
        align-items: center;
        gap: 12px;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .link-btn {
        background: none;
        border: none;
        color: #0d6efd;
        cursor: pointer;
        text-decoration: underline;
        font-size: inherit;
    }

    .link-btn:hover {
        color: #0b5ed7;
    }

    .boards-section h2 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0 0 20px 0;
        color: #212529;
    }

    .boards-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .board-item {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 16px;
        cursor: pointer;
        transition: border-color 0.15s ease;
    }

    .board-item:hover {
        border-color: #adb5bd;
    }

    .board-item h3 {
        font-size: 1rem;
        font-weight: 500;
        margin: 0 0 4px 0;
        color: #212529;
    }

    .board-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.875rem;
        color: #6c757d;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 8px;
        padding: 8px 12px;
        background: #f8d7da;
        border: 1px solid #f5c2c7;
        border-radius: 6px;
    }

    /* Modal */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 20px;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        padding: 32px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .modal-content h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0 0 24px 0;
        color: #212529;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        font-weight: 500;
        margin-bottom: 6px;
        color: #212529;
        font-size: 0.9rem;
    }

    .form-group input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 1rem;
    }

    .form-group input:focus {
        outline: none;
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .radio-group {
        display: flex;
        gap: 16px;
    }

    .radio-group label {
        display: flex;
        align-items: center;
        gap: 6px;
        font-weight: normal;
        margin: 0;
        cursor: pointer;
    }

    .modal-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 32px;
    }

    .modal-actions button {
        padding: 10px 20px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        background: white;
        cursor: pointer;
        font-weight: 500;
    }

    .modal-actions button:hover {
        background: #f8f9fa;
    }

    .modal-actions button.primary {
        background: #0d6efd;
        color: white;
        border-color: #0d6efd;
    }

    .modal-actions button.primary:hover {
        background: #0b5ed7;
        border-color: #0b5ed7;
    }

    .modal-actions button:disabled {
        background: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
    }

    @@media (max-width: 768px) {
        .header {
            padding: 40px 20px 30px;
        }

        .header h1 {
            font-size: 2rem;
        }

        .main {
            padding: 30px 16px;
        }

        .join-section {
            padding: 24px;
        }

        .input-group {
            flex-direction: column;
        }

        .modal-content {
            padding: 24px;
            margin: 10px;
        }
    }
</style>