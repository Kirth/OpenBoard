@page "/"
@using WhiteboardApp.Services
@using WhiteboardApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject BoardService BoardService
@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>OpenBoard</PageTitle>

<link href="css/home.css" rel="stylesheet" />

<div class="home-container">
    <header class="header">
        <div class="header-content">
            <div class="header-left">
                <h1>OpenBoard</h1>
                <p>Real-time collaborative whiteboard</p>
            </div>
            <div class="header-right">
                <UserMenu />
            </div>
        </div>
    </header>
    
    <main class="main">
        <section class="join-section">
            <h2>Join Board</h2>
            <div class="input-group">
                <input type="text" placeholder="Board ID" @bind="boardId" @oninput="ClearError" />
                <button @onclick="JoinBoard" disabled="@string.IsNullOrWhiteSpace(boardId)">Join</button>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
            <div class="quick-actions">
                <button class="link-btn" @onclick="ShowCreateModal">Create new board</button>
            </div>
        </section>

        <AuthorizeView>
            <Authorized>
                <section class="boards-section">
                    <h2>My Boards</h2>
                    <p class="section-description">Boards you own and collaborate on</p>
                    
                    @if (userBoards != null && userBoards.Count > 0)
                    {
                        <div class="boards-list">
                            @foreach (var board in userBoards)
                            {
                                <div class="board-item" @onclick="@(() => JoinSpecificBoard(board.Id))">
                                    <div class="board-header">
                                        <h3>@board.Name</h3>
                                        <span class="board-visibility-badge @(board.AccessLevel == BoardAccessLevel.Public ? "public" : "private")">
                                            @(board.AccessLevel == BoardAccessLevel.Public ? "Public" : 
                                              board.AccessLevel == BoardAccessLevel.LinkSharing ? "Link Sharing" : "Private")
                                        </span>
                                    </div>
                                    <div class="board-info">
                                        <span><i class="fas fa-sticky-note"></i> @GetStickyCount(board)</span>
                                        <span><i class="fas fa-clock"></i> @FormatDate(board.UpdatedAt)</span>
                                        <span><i class="fas fa-crown"></i> Owner</span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (userBoards != null)
                    {
                        <div class="empty-state">
                            <p>You haven't created any boards yet. <button class="link-btn" @onclick="ShowCreateModal">Create your first board</button></p>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <p>Loading your boards...</p>
                        </div>
                    }
                </section>
            </Authorized>
        </AuthorizeView>

        @if (publicBoards != null && publicBoards.Count > 0)
        {
            <section class="boards-section">
                <h2>Public Boards</h2>
                <p class="section-description">Community boards anyone can join</p>
                <div class="boards-list">
                    @foreach (var board in publicBoards)
                    {
                        <div class="board-item" @onclick="@(() => JoinSpecificBoard(board.Id))">
                            <div class="board-header">
                                <h3>@board.Name</h3>
                                <span class="board-visibility-badge public">Public</span>
                            </div>
                            <div class="board-info">
                                <span><i class="fas fa-sticky-note"></i> @GetStickyCount(board)</span>
                                <span><i class="fas fa-clock"></i> @FormatDate(board.UpdatedAt)</span>
                                <span><i class="fas fa-user"></i> @(board.Owner?.DisplayName ?? "Unknown")</span>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }
    </main>
</div>

<!-- Create Board Modal -->
@if (showCreateModal)
{
    <div class="modal modal-simple" @onclick="HideCreateModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Create Board</h3>
            
            <div class="form-group">
                <label>Title</label>
                <input type="text" @bind="newBoardTitle" placeholder="My Board" />
            </div>
            
            <div class="form-group">
                <label>Visibility</label>
                <AuthorizeView>
                    <Authorized>
                        <div class="radio-group">
                            <label>
                                <input type="radio" name="visibility" @onchange="@(() => isPublicBoard = false)" checked="@(!isPublicBoard)" />
                                Private <small class="text-muted">(Only you and invited collaborators)</small>
                            </label>
                            <label>
                                <input type="radio" name="visibility" @onchange="@(() => isPublicBoard = true)" checked="@isPublicBoard" />
                                Public <small class="text-muted">(Listed publicly, anyone can view)</small>
                            </label>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="radio-group">
                            <label>
                                <input type="radio" name="visibility" @onchange="@(() => isPublicBoard = false)" checked="@(!isPublicBoard)" />
                                Unlisted <small class="text-muted">(Not listed publicly but shareable)</small>
                            </label>
                            <label>
                                <input type="radio" name="visibility" @onchange="@(() => isPublicBoard = true)" checked="@isPublicBoard" />
                                Public <small class="text-muted">(Listed publicly, anyone can view)</small>
                            </label>
                        </div>
                        <div class="auth-notice">
                            <small class="text-info">
                                <i class="fas fa-info-circle"></i>
                                <a href="/Account/Login" class="link">Sign in</a> to create private boards and manage collaborators
                            </small>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            
            <div class="form-group">
                <label>Admin PIN (optional)</label>
                <input type="password" @bind="adminPin" placeholder="Leave empty for none" />
            </div>
            
            <div class="modal-actions">
                <button @onclick="HideCreateModal">Cancel</button>
                <button @onclick="CreateNewBoard" disabled="@string.IsNullOrWhiteSpace(newBoardTitle)" class="primary">Create</button>
            </div>
        </div>
    </div>
}

@code {
    private string boardId = "";
    private string newBoardTitle = "";
    private bool isPublicBoard = false;
    private string adminPin = "";
    private bool showCreateModal = false;
    private string errorMessage = "";
    private List<WhiteboardApp.Models.Board>? publicBoards;
    private List<WhiteboardApp.Models.Board>? userBoards;

    protected override async Task OnInitializedAsync()
    {
        publicBoards = await BoardService.GetPublicBoardsAsync();
        
        // Load user's boards if authenticated
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try 
                {
                    var user = await UserService.GetOrCreateUserAsync(authState.User);
                    userBoards = await BoardService.GetUserOwnedBoardsAsync(user);
                }
                catch
                {
                    // If there's an issue getting user boards, just leave userBoards as null
                    userBoards = null;
                }
            }
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private async Task CreateNewBoard()
    {
        if (string.IsNullOrWhiteSpace(newBoardTitle))
            return;

        User user;
        
        // Check if user is authenticated
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try 
                {
                    user = await UserService.GetOrCreateUserAsync(authState.User);
                }
                catch
                {
                    // Fallback to anonymous user if there's an issue
                    user = await UserService.GetAnonymousUserAsync();
                }
            }
            else
            {
                user = await UserService.GetAnonymousUserAsync();
            }
        }
        else
        {
            user = await UserService.GetAnonymousUserAsync();
        }

        var board = await BoardService.CreateBoardAsync(newBoardTitle.Trim(), user, isPublicBoard, 
            string.IsNullOrWhiteSpace(adminPin) ? null : adminPin.Trim());
        
        // Refresh user boards list if user is authenticated
        if (user.SubjectId != "anonymous-user")
        {
            userBoards = await BoardService.GetUserOwnedBoardsAsync(user);
        }
        
        HideCreateModal();
        Navigation.NavigateTo($"/board/{board.Id}");
    }

    private void JoinDefaultBoard()
    {
        Navigation.NavigateTo("/board/11111111-1111-1111-1111-111111111111");
    }

    private async Task JoinBoard()
    {
        if (string.IsNullOrEmpty(boardId))
            return;

        errorMessage = "";
        
        // Validate GUID format
        if (!Guid.TryParse(boardId, out var boardGuid))
        {
            errorMessage = "Invalid board ID format";
            return;
        }

        // Check if board exists
        var board = await BoardService.GetBoardAsync(boardGuid);
        if (board == null)
        {
            errorMessage = "Board not found";
            return;
        }

        Navigation.NavigateTo($"/board/{boardId}");
    }

    private void JoinSpecificBoard(Guid id)
    {
        Navigation.NavigateTo($"/board/{id}");
    }

    private void ShowCreateModal()
    {
        newBoardTitle = "";
        isPublicBoard = false;
        adminPin = "";
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private string FormatDate(DateTime date)
    {
        var timeAgo = DateTime.UtcNow - date;
        if (timeAgo.TotalMinutes < 1) return "now";
        if (timeAgo.TotalHours < 1) return $"{(int)timeAgo.TotalMinutes}m";
        if (timeAgo.TotalDays < 1) return $"{(int)timeAgo.TotalHours}h";
        if (timeAgo.TotalDays < 7) return $"{(int)timeAgo.TotalDays}d";
        return date.ToString("M/d");
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    private string GetStickyCount(WhiteboardApp.Models.Board board)
    {
        var count = board.Elements?.Count ?? 0;
        return count == 1 ? "1 item" : $"{count} items";
    }
}