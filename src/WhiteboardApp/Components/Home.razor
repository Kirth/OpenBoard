@page "/"
@using WhiteboardApp.Services
@using WhiteboardApp.Models
@inject BoardService BoardService
@inject NavigationManager Navigation

<PageTitle>OpenBoard</PageTitle>

<div class="home-container">
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">üìã OpenBoard</h1>
            <p class="hero-subtitle">Open source collaborative whiteboarding for everyone</p>
        </div>
    </div>
    
    <div class="main-content">
        <!-- Join Board Section (Top) -->
        <div class="join-section">
            <div class="join-card">
                <div class="card-header">
                    <h3>üîó Join Existing Board</h3>
                    <p>Connect to a shared whiteboard</p>
                </div>
                
                <div class="card-form">
                    <div class="form-group">
                        <label for="boardId">Board ID</label>
                        <input type="text" id="boardId" class="form-input" 
                               placeholder="Paste the board ID here" 
                               @bind="boardId" />
                    </div>
                    
                    <button class="btn btn-join" @onclick="JoinBoard" disabled="@string.IsNullOrWhiteSpace(boardId)">
                        Join Board
                    </button>
                    
                    <div class="divider">
                        <span>or</span>
                    </div>
                    
                    <button class="btn btn-demo" @onclick="JoinDefaultBoard">
                        Try Demo Board
                    </button>
                    
                    <button class="btn btn-create" @onclick="ShowCreateModal">
                        Create New Board
                    </button>
                </div>
            </div>
        </div>

        <!-- Public Boards Section -->
        <div class="public-boards-section">
            <h3 class="section-title">üåç Public Boards</h3>
            
            @if (publicBoards == null)
            {
                <div class="loading">Loading public boards...</div>
            }
            else if (publicBoards.Count == 0)
            {
                <div class="empty-state">
                    <p>No public boards available yet.</p>
                    <p>Be the first to create one!</p>
                </div>
            }
            else
            {
                <div class="boards-grid">
                    @foreach (var board in publicBoards)
                    {
                        <div class="board-card" @onclick="@(() => JoinSpecificBoard(board.Id))">
                            <div class="board-header">
                                <h4 class="board-title">@board.Name</h4>
                                <span class="board-updated">@FormatDate(board.UpdatedAt)</span>
                            </div>
                            <div class="board-meta">
                                <span class="board-status">Public</span>
                                <span class="board-elements">@board.Elements.Count elements</span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Board Modal -->
<div class="modal @(showCreateModal ? "show" : "")" @onclick="HideCreateModal">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>üöÄ Create New Board</h3>
            <button class="modal-close" @onclick="HideCreateModal">&times;</button>
        </div>
        
        <div class="modal-body">
            <div class="form-group">
                <label for="modalBoardTitle">Board Title</label>
                <input type="text" id="modalBoardTitle" class="form-input" 
                       placeholder="Enter a title for your board" 
                       @bind="newBoardTitle" />
            </div>
            
            <div class="form-group">
                <label>Visibility</label>
                <div class="radio-group">
                    <label class="radio-option">
                        <input type="radio" name="modalVisibility" value="false" 
                               @onchange="@(() => isPublicBoard = false)" 
                               checked="@(!isPublicBoard)" />
                        <span class="radio-label">
                            <strong>üîí Unlisted</strong>
                            <small>Only people with the link can access</small>
                        </span>
                    </label>
                    <label class="radio-option">
                        <input type="radio" name="modalVisibility" value="true" 
                               @onchange="@(() => isPublicBoard = true)" 
                               checked="@isPublicBoard" />
                        <span class="radio-label">
                            <strong>üåç Public</strong>
                            <small>Anyone can discover and view</small>
                        </span>
                    </label>
                </div>
            </div>
            
            <div class="form-group">
                <label for="modalAdminPin">Admin PIN (Optional)</label>
                <input type="password" id="modalAdminPin" class="form-input" 
                       placeholder="Leave empty or set a PIN for admin features" 
                       @bind="adminPin" />
                <small class="form-hint">This will be used for admin features in the future</small>
            </div>
        </div>
        
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="HideCreateModal">Cancel</button>
            <button class="btn btn-create" @onclick="CreateNewBoard" disabled="@string.IsNullOrWhiteSpace(newBoardTitle)">
                Create Board
            </button>
        </div>
    </div>
</div>

@code {
    private string boardId = "";
    private string newBoardTitle = "";
    private bool isPublicBoard = false;
    private string adminPin = "";
    private bool showCreateModal = false;
    private List<WhiteboardApp.Models.Board>? publicBoards;

    protected override async Task OnInitializedAsync()
    {
        publicBoards = await BoardService.GetPublicBoardsAsync();
    }

    private async Task CreateNewBoard()
    {
        if (string.IsNullOrWhiteSpace(newBoardTitle))
            return;

        var board = await BoardService.CreateBoardAsync(newBoardTitle.Trim(), isPublicBoard, 
            string.IsNullOrWhiteSpace(adminPin) ? null : adminPin.Trim());
        
        HideCreateModal();
        Navigation.NavigateTo($"/board/{board.Id}");
    }

    private void JoinDefaultBoard()
    {
        Navigation.NavigateTo("/board/11111111-1111-1111-1111-111111111111");
    }

    private void JoinBoard()
    {
        if (!string.IsNullOrEmpty(boardId))
        {
            Navigation.NavigateTo($"/board/{boardId}");
        }
    }

    private void JoinSpecificBoard(Guid id)
    {
        Navigation.NavigateTo($"/board/{id}");
    }

    private void ShowCreateModal()
    {
        newBoardTitle = "";
        isPublicBoard = false;
        adminPin = "";
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private string FormatDate(DateTime date)
    {
        var timeAgo = DateTime.UtcNow - date;
        if (timeAgo.TotalMinutes < 1) return "Just now";
        if (timeAgo.TotalHours < 1) return $"{(int)timeAgo.TotalMinutes}m ago";
        if (timeAgo.TotalDays < 1) return $"{(int)timeAgo.TotalHours}h ago";
        if (timeAgo.TotalDays < 7) return $"{(int)timeAgo.TotalDays}d ago";
        return date.ToString("MMM dd");
    }
}

<style>
    .home-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        flex-direction: column;
    }

    .hero-section {
        padding: 60px 20px 40px;
        text-align: center;
        color: white;
    }

    .hero-content {
        max-width: 600px;
        margin: 0 auto;
    }

    .hero-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin-bottom: 16px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .hero-subtitle {
        font-size: 1.25rem;
        opacity: 0.9;
        margin-bottom: 0;
        font-weight: 300;
    }

    .main-content {
        flex: 1;
        padding: 0 20px 40px;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 40px;
    }

    .join-section {
        width: 100%;
        max-width: 500px;
    }

    .join-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 16px;
        padding: 32px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .join-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    }

    .card-header {
        margin-bottom: 24px;
        text-align: center;
    }

    .card-header h3 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .card-header p {
        color: #6b7280;
        margin-bottom: 0;
        font-size: 0.95rem;
    }

    .card-form {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-group label {
        font-weight: 600;
        color: #374151;
        font-size: 0.9rem;
    }

    .form-input {
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        background: white;
    }

    .form-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-input::placeholder {
        color: #9ca3af;
    }

    .form-hint {
        color: #6b7280;
        font-size: 0.8rem;
        margin-top: 4px;
    }

    .radio-group {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .radio-option {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        cursor: pointer;
        padding: 12px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        transition: border-color 0.2s ease, background-color 0.2s ease;
    }

    .radio-option:hover {
        border-color: #d1d5db;
        background-color: #f9fafb;
    }

    .radio-option input[type="radio"] {
        margin-top: 2px;
    }

    .radio-option input[type="radio"]:checked + .radio-label {
        color: #3b82f6;
    }

    .radio-option:has(input[type="radio"]:checked) {
        border-color: #3b82f6;
        background-color: #eff6ff;
    }

    .radio-label {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .radio-label strong {
        font-weight: 600;
        color: #374151;
    }

    .radio-label small {
        color: #6b7280;
        font-size: 0.85rem;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
        text-decoration: none;
        display: inline-block;
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-create {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    .btn-create:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(16, 185, 129, 0.4);
    }

    .btn-join {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .btn-join:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(59, 130, 246, 0.4);
    }

    .btn-demo {
        background: rgba(107, 114, 128, 0.1);
        color: #374151;
        border: 2px solid #e5e7eb;
    }

    .btn-demo:hover {
        background: rgba(107, 114, 128, 0.1);
        border-color: #d1d5db;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: #f3f4f6;
        color: #374151;
        border: 2px solid #e5e7eb;
    }

    .btn-secondary:hover {
        background: #e5e7eb;
        border-color: #d1d5db;
    }

    .divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 8px 0;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: #e5e7eb;
    }

    .divider span {
        padding: 0 16px;
        color: #9ca3af;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .public-boards-section {
        width: 100%;
        max-width: 1000px;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: white;
        text-align: center;
        margin-bottom: 24px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .loading, .empty-state {
        text-align: center;
        color: white;
        opacity: 0.8;
        padding: 40px 20px;
    }

    .empty-state p {
        margin: 8px 0;
    }

    .boards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
    }

    .board-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
    }

    .board-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
    }

    .board-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 12px;
        gap: 12px;
    }

    .board-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
        line-height: 1.3;
        flex: 1;
    }

    .board-updated {
        font-size: 0.8rem;
        color: #6b7280;
        white-space: nowrap;
    }

    .board-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.85rem;
        color: #6b7280;
    }

    .board-status {
        background: #dcfce7;
        color: #166534;
        padding: 2px 8px;
        border-radius: 4px;
        font-weight: 500;
    }

    .board-elements {
        color: #9ca3af;
    }

    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
        padding: 20px;
    }

    .modal.show {
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        background: white;
        border-radius: 16px;
        box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 500px;
        max-height: 90vh;
        overflow: auto;
        transform: scale(0.9);
        transition: transform 0.3s ease;
    }

    .modal.show .modal-content {
        transform: scale(1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 24px 0;
        border-bottom: 1px solid #e5e7eb;
        margin-bottom: 24px;
    }

    .modal-header h3 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        color: #6b7280;
        cursor: pointer;
        padding: 4px;
        line-height: 1;
        transition: color 0.2s ease;
    }

    .modal-close:hover {
        color: #374151;
    }

    .modal-body {
        padding: 0 24px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .modal-footer {
        padding: 24px;
        border-top: 1px solid #e5e7eb;
        margin-top: 24px;
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .hero-title {
            font-size: 2.5rem;
        }

        .main-content {
            padding: 0 16px 32px;
            gap: 32px;
        }

        .hero-section {
            padding: 40px 16px 32px;
        }

        .join-card {
            padding: 24px;
        }

        .boards-grid {
            grid-template-columns: 1fr;
        }

        .modal-content {
            margin: 10px;
            max-width: none;
        }

        .modal-header,
        .modal-body,
        .modal-footer {
            padding-left: 20px;
            padding-right: 20px;
        }
    }
</style>