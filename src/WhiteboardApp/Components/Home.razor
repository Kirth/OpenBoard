@page "/"
@using WhiteboardApp.Services
@using WhiteboardApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject BoardService BoardService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject BoardImportService ImportService

<PageTitle>OpenBoard</PageTitle>

<link href="css/home.css" rel="stylesheet" />
<script src="js/theme.js"></script>

<header class="container topbar" role="banner">
    <div class="brand">
        <!-- <div class="logo" aria-hidden="true">OB</div> --> 
        OpenBoard
    </div>
    <!--
    <nav class="nav" aria-label="Primary">
        <a href="#features">Features</a>
        <a href="#community">Community</a>
        <a href="#">Docs</a>
    </nav>
    -->
    <div class="user">
        <button id="themeToggle" class="toggle" aria-pressed="true" title="Toggle theme">🌙</button>
        <!--<span class="chip">v0.1 demo</span>-->
        <UserMenu />
    </div>
</header>

<section class="container hero">
    <div>
        <h1>Real‑Time Collaborative Whiteboarding</h1>
        <p class="sub">Sketch ideas, stack stickies, and plan together from anywhere.</p>

        <BoardSearchInput 
            Placeholder="Enter board name, URL, or ID to join…"
            OnBoardSelected="OnBoardSelected"
            OnDirectJoin="OnDirectJoin"
            OnError="OnSearchError" />
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="hero-error-message">@errorMessage</div>
        }


        <div class="cta-row">
            <button class="btn btn-primary" type="button" @onclick="ShowCreateModal">Create board</button>

        @if (showTemplateMenu)
        {
            <div class="template-dropdown">

                <button class="btn btn-ghost" type="button" @onclick="ToggleTemplateMenu" 
                        aria-expanded="@showTemplateMenu" aria-controls="templateMenu">
                    New from template ▾
                </button>
                    <div id="templateMenu" class="template-menu" @onclick:stopPropagation="true">
                        <button type="button" @onclick="@(() => CreateFromTemplate("kanban"))">Kanban</button>
                        <button type="button" @onclick="@(() => CreateFromTemplate("retrospective"))">Retrospective</button>
                        <button type="button" @onclick="@(() => CreateFromTemplate("flowchart"))">Flowchart</button>
                        <button type="button" @onclick="@(() => CreateFromTemplate("blank"))">Blank</button>
                    </div>
            </div>


        }
        </div>
    </div>

    <div class="hero-art" aria-hidden="true">
        <img src="img/intro.png" alt="Whiteboard collaboration illustration" class="hero-image" />
    </div>
</section>

<main class="container" role="main" @onclick="@(() => { if (showTemplateMenu) showTemplateMenu = false; })">
    <!-- Active Now Section -->
    @if (activeBoards != null && activeBoards.Count > 0)
    {
        <section class="active-now-section" aria-label="Active boards">
            <h2 class="section-title">
                <span class="activity-dot"></span>
                Active Now
            </h2>
            <div class="active-boards-grid">
                @foreach (var board in activeBoards.Take(3))
                {
                    <article class="active-board-card" tabindex="0" @onclick="@(async () => await JoinSpecificBoard(board.Id))">
                        <div class="active-thumb" aria-hidden="true">@board.Emoji</div>
                        <div class="active-meta">
                            <h3>@board.Name <span class="owner-name">• @(board.Owner?.DisplayName ?? "Unknown")</span></h3>
                        </div>
                    </article>
                }
            </div>
        </section>
    }

    <AuthorizeView>
        <Authorized>
            <div class="tabs-wrap">
                <nav class="tabs" aria-label="Board sections">
                    <button class="tab @(activeTab == "my" ? "active" : "")" type="button" @onclick="@(() => SetActiveTab("my"))">My Boards</button>
                    <button class="tab @(activeTab == "public" ? "active" : "")" type="button" @onclick="@(() => SetActiveTab("public"))">Public</button>
                    <button class="tab @(activeTab == "recent" ? "active" : "")" type="button" @onclick="@(() => SetActiveTab("recent"))">Recent</button>
                </nav>
                <div class="toolbar" role="region" aria-label="Filters">
                <!-- TODO: implement this :) 
                    <input class="input" @bind="searchQuery" @oninput="FilterBoards" placeholder="Search boards" />
                    <select @bind="sortOrder" aria-label="Sort">
                        <option value="updated">Updated</option>
                        <option value="alphabetical">Alphabetical</option>
                        <option value="created">Created</option>
                    </select>
                  -->
                </div>
            </div>
        </Authorized>
    </AuthorizeView>

    <section class="grid" aria-label="Boards list">
        <AuthorizeView>
            <Authorized>
                @if (activeTab == "my")
                {
                    @if (displayedBoards != null && displayedBoards.Count > 0)
                    {
                        @foreach (var board in displayedBoards)
                        {
                            <article class="card" tabindex="0" @onclick="@(async () => await JoinSpecificBoard(board.Id))">
                                <div class="thumb" aria-hidden="true">@board.Emoji</div>
                                <div class="meta">
                                    <h3>
                                        @board.Name
                                        <!-- TODO <button class="icon-btn" aria-label="Star board" aria-pressed="false" 
                                                @onclick="@(e => ToggleStar(board.Id))" 
                                                @onclick:stopPropagation="true">★</button> --> 
                                    </h3>
                                    <div class="row">
                                        <span>Updated @FormatDate(board.UpdatedAt)</span>
                                        <span>•</span>
                                        <span>@GetElementCount(board)</span>
                                    </div>
                                    @if (GetCollaboratorCount(board) > 0)
                                    {
                                        <div class="avatars" aria-label="Collaborators">
                                            @* Placeholder for collaborator avatars *@
                                        </div>
                                    }
                                </div>
                                <div class="actions">
                                    <div class="badge @GetAccessLevelClass(board.AccessLevel)">
                                        @GetAccessLevelIcon(board.AccessLevel) @GetAccessLevelText(board.AccessLevel)
                                    </div>
                                    <button class="icon-btn" title="Share" @onclick="@(e => ShareBoard(board.Id))" @onclick:stopPropagation="true">⋯</button>
                                </div>
                            </article>
                        }
                    }
                    else if (displayedBoards != null)
                    {
                        <div class="empty-state">
                            <p>@(string.IsNullOrEmpty(searchQuery) ? "You haven't created any boards yet." : "No boards match your search.")</p>
                            @if (string.IsNullOrEmpty(searchQuery))
                            {
                                <button class="link-btn" @onclick="ShowCreateModal">Create your first board</button>
                            }
                        </div>
                    }
                    else
                    {
                        @* Loading skeleton *@
                        @for (int i = 0; i < 3; i++)
                        {
                            <article class="card">
                                <div class="thumb skeleton"></div>
                                <div class="meta">
                                    <div class="skeleton" style="height:18px; width:160px; border-radius:6px"></div>
                                    <div class="skeleton" style="height:12px; width:220px; margin-top:10px; border-radius:6px"></div>
                                </div>
                                <div class="actions">
                                    <div class="skeleton" style="height:28px; width:80px; border-radius:999px"></div>
                                </div>
                            </article>
                        }
                    }
                }
                else if (activeTab == "public")
                {
                    @if (publicBoards != null && publicBoards.Count > 0)
                    {
                        @foreach (var board in publicBoards.Where(FilterBoard))
                        {
                            <article class="card" tabindex="0" @onclick="@(async () => await JoinSpecificBoard(board.Id))">
                                <div class="thumb" aria-hidden="true">@board.Emoji</div>
                                <div class="meta">
                                    <h3>
                                        @board.Name
                                        <!-- TODO <button class="icon-btn" aria-label="Star board" aria-pressed="false" 
                                                @onclick="@(e => ToggleStar(board.Id))" 
                                                @onclick:stopPropagation="true">★</button> -->
                                    </h3>
                                    <div class="row">
                                        <span>Updated @FormatDate(board.UpdatedAt)</span>
                                        <span>•</span>
                                        <span>@GetStickyCount(board)</span>
                                        <span>•</span>
                                        <span>@(board.Owner?.DisplayName ?? "Unknown")</span>
                                    </div>
                                </div>
                                <div class="actions">
                                    <div class="badge public">🌐 Public</div>
                                    <button class="icon-btn" title="Share" @onclick="@(e => ShareBoard(board.Id))" @onclick:stopPropagation="true">⋯</button>
                                </div>
                            </article>
                        }
                    }
                    else if (publicBoards != null)
                    {
                        <div class="empty-state">
                            <p>No public boards available right now.</p>
                        </div>
                    }
                    else
                    {
                        @* Loading skeleton *@
                        @for (int i = 0; i < 3; i++)
                        {
                            <article class="card">
                                <div class="thumb skeleton"></div>
                                <div class="meta">
                                    <div class="skeleton" style="height:18px; width:160px; border-radius:6px"></div>
                                    <div class="skeleton" style="height:12px; width:220px; margin-top:10px; border-radius:6px"></div>
                                </div>
                                <div class="actions">
                                    <div class="skeleton" style="height:28px; width:80px; border-radius:999px"></div>
                                </div>
                            </article>
                        }
                    }
                }
                else if (activeTab == "recent")
                {
                    @if (recentBoards != null && recentBoards.Count > 0)
                    {
                        @foreach (var board in recentBoards.Where(FilterBoard))
                        {
                            <article class="card" tabindex="0" @onclick="@(async () => await JoinSpecificBoard(board.Id))">
                                <div class="thumb" aria-hidden="true">@board.Emoji</div>
                                <div class="meta">
                                    <h3>
                                        @board.Name
                                        <!-- TODO <button class="icon-btn" aria-label="Star board" aria-pressed="false" 
                                                @onclick="@(e => ToggleStar(board.Id))" 
                                                @onclick:stopPropagation="true">★</button> --> 
                                    </h3>
                                    <div class="row">
                                        <span>Updated @FormatDate(board.UpdatedAt)</span>
                                        <span>•</span>
                                        <span>@GetElementCount(board)</span>
                                        <span>•</span>
                                        <span>@(board.Owner?.DisplayName ?? "Unknown")</span>
                                    </div>
                                </div>
                                <div class="actions">
                                    <div class="badge @GetAccessLevelClass(board.AccessLevel)">
                                        @GetAccessLevelIcon(board.AccessLevel) @GetAccessLevelText(board.AccessLevel)
                                    </div>
                                    <button class="icon-btn" title="Share" @onclick="@(e => ShareBoard(board.Id))" @onclick:stopPropagation="true">⋯</button>
                                </div>
                            </article>
                        }
                    }
                    else if (recentBoards != null)
                    {
                        <div class="empty-state">
                            <p>No recent boards yet. Join or create a board to see it here!</p>
                        </div>
                    }
                    else
                    {
                        @* Loading skeleton *@
                        @for (int i = 0; i < 3; i++)
                        {
                            <article class="card">
                                <div class="thumb skeleton"></div>
                                <div class="meta">
                                    <div class="skeleton" style="height:18px; width:160px; border-radius:6px"></div>
                                    <div class="skeleton" style="height:12px; width:220px; margin-top:10px; border-radius:6px"></div>
                                </div>
                                <div class="actions">
                                    <div class="skeleton" style="height:28px; width:80px; border-radius:999px"></div>
                                </div>
                            </article>
                        }
                    }
                }
            </Authorized>
            <NotAuthorized>
                <div class="public-boards-section">
                    @if (publicBoards != null && publicBoards.Count > 0)
                    {
                        @foreach (var board in publicBoards)
                        {
                            <article class="card" tabindex="0" @onclick="@(async () => await JoinSpecificBoard(board.Id))">
                                <div class="thumb" aria-hidden="true">@board.Emoji</div>
                                <div class="meta">
                                    <h3>@board.Name</h3>
                                    <div class="row">
                                        <span>Updated @FormatDate(board.UpdatedAt)</span>
                                        <span>•</span>
                                        <span>@GetStickyCount(board)</span>
                                        <span>•</span>
                                        <span>@(board.Owner?.DisplayName ?? "Unknown")</span>
                                    </div>
                                </div>
                                <div class="actions">
                                    <div class="badge public">🌐 Public</div>
                                </div>
                            </article>
                        }
                    }
                    else if (publicBoards != null)
                    {
                        <div class="empty-state">
                            <p>No public boards available right now.</p>
                        </div>
                    }
                    else
                    {
                        @* Loading skeleton *@
                        @for (int i = 0; i < 3; i++)
                        {
                            <article class="card">
                                <div class="thumb skeleton"></div>
                                <div class="meta">
                                    <div class="skeleton" style="height:18px; width:160px; border-radius:6px"></div>
                                    <div class="skeleton" style="height:12px; width:220px; margin-top:10px; border-radius:6px"></div>
                                </div>
                                <div class="actions">
                                    <div class="skeleton" style="height:28px; width:80px; border-radius:999px"></div>
                                </div>
                            </article>
                        }
                    }
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </section>

    <footer class="container" id="community">
        <p>OpenBoard is open source. <a href="https://github.com/Kirth/OpenBoard">View on GitHub</a></p>
    </footer>
</main>

<div class="toast" id="toast" role="status" aria-live="polite" style="@(showToast ? "display: block;" : "display: none;")">
    @toastMessage
</div>

<!-- Create Board Modal -->
@if (showCreateModal)
{
    <div class="modal" @onclick="HideCreateModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Create Board</h3>
            
            <!-- Tab Navigation (Only for authenticated users) -->
            <AuthorizeView>
                <Authorized>
                    <div class="tab-navigation">
                        <button class="tab-button @(createModalTab == "new" ? "active" : "")" @onclick="@(() => createModalTab = "new")">
                            Create New
                        </button>
                        <button class="tab-button @(createModalTab == "import" ? "active" : "")" @onclick="@(() => createModalTab = "import")">
                            Import from JSON
                        </button>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <!-- Hidden tab indicator for styling consistency -->
                    <div class="tab-navigation" style="display: none;"></div>
                </NotAuthorized>
            </AuthorizeView>

            <!-- Create New Tab -->
            @if (createModalTab == "new")
            {
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" @bind="newBoardTitle" placeholder="My Board" />
                </div>
                
                <div class="form-group">
                <label>Emoji</label>
                <div class="emoji-picker-container">
                    <div class="emoji-display" @onclick="ToggleEmojiPicker">
                        <span class="selected-emoji">@selectedEmoji</span>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                    @if (showEmojiPicker)
                    {
                        <div class="emoji-grid" @onclick:stopPropagation="true">
                            @foreach (var emoji in availableEmojis)
                            {
                                <button type="button" class="emoji-option @(selectedEmoji == emoji ? "selected" : "")" 
                                        @onclick="@(() => SelectEmoji(emoji))">
                                    @emoji
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
            
            <div class="form-group">
                <label>Visibility</label>
                <AuthorizeView>
                    <Authorized>
                        <div class="radio-group">
                            <div class="radio-option @(selectedAccessLevel == BoardAccessLevel.Private ? "selected" : "")">
                                <label>
                                    <input type="radio" name="visibility" @onchange="@(() => selectedAccessLevel = BoardAccessLevel.Private)" checked="@(selectedAccessLevel == BoardAccessLevel.Private)" />
                                    <div class="radio-content">
                                        <div class="radio-header">
                                            <i class="fas fa-lock radio-icon"></i>
                                            <span class="radio-title">Private</span>
                                        </div>
                                        <small class="radio-description">Only you and invited collaborators can access</small>
                                    </div>
                                </label>
                            </div>
                            <div class="radio-option @(selectedAccessLevel == BoardAccessLevel.Unlisted ? "selected" : "")">
                                <label>
                                    <input type="radio" name="visibility" @onchange="@(() => selectedAccessLevel = BoardAccessLevel.Unlisted)" checked="@(selectedAccessLevel == BoardAccessLevel.Unlisted)" />
                                    <div class="radio-content">
                                        <div class="radio-header">
                                            <i class="fas fa-link radio-icon"></i>
                                            <span class="radio-title">Unlisted</span>
                                        </div>
                                        <small class="radio-description">Anyone with board ID can access, not listed publicly</small>
                                    </div>
                                </label>
                            </div>
                            <div class="radio-option @(selectedAccessLevel == BoardAccessLevel.Public ? "selected" : "")">
                                <label>
                                    <input type="radio" name="visibility" @onchange="@(() => selectedAccessLevel = BoardAccessLevel.Public)" checked="@(selectedAccessLevel == BoardAccessLevel.Public)" />
                                    <div class="radio-content">
                                        <div class="radio-header">
                                            <i class="fas fa-globe radio-icon"></i>
                                            <span class="radio-title">Public</span>
                                        </div>
                                        <small class="radio-description">Listed publicly, anyone can view</small>
                                    </div>
                                </label>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="radio-group">
                            <div class="radio-option @(selectedAccessLevel == BoardAccessLevel.Unlisted ? "selected" : "")">
                                <label>
                                    <input type="radio" name="visibility" @onchange="@(() => selectedAccessLevel = BoardAccessLevel.Unlisted)" checked="@(selectedAccessLevel == BoardAccessLevel.Unlisted)" />
                                    <div class="radio-content">
                                        <div class="radio-header">
                                            <i class="fas fa-link radio-icon"></i>
                                            <span class="radio-title">Unlisted</span>
                                        </div>
                                        <small class="radio-description">Anyone with board ID can access, not listed publicly</small>
                                    </div>
                                </label>
                            </div>
                            <div class="radio-option @(selectedAccessLevel == BoardAccessLevel.Public ? "selected" : "")">
                                <label>
                                    <input type="radio" name="visibility" @onchange="@(() => selectedAccessLevel = BoardAccessLevel.Public)" checked="@(selectedAccessLevel == BoardAccessLevel.Public)" />
                                    <div class="radio-content">
                                        <div class="radio-header">
                                            <i class="fas fa-globe radio-icon"></i>
                                            <span class="radio-title">Public</span>
                                        </div>
                                        <small class="radio-description">Listed publicly, anyone can view</small>
                                    </div>
                                </label>
                            </div>
                        </div>
                        <div class="auth-notice">
                            <small class="text-info">
                                <i class="fas fa-info-circle"></i>
                                <a href="/Account/Login" class="link">Sign in</a> to create private boards and manage collaborators
                            </small>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            }

            <!-- Import from JSON Tab -->
            @if (createModalTab == "import")
            {
                <div class="import-section">
                    @if (string.IsNullOrEmpty(importJsonContent))
                    {
                        <div class="form-group">
                            <label>Select JSON File</label>
                            <InputFile @ref="jsonFileInput" accept=".json" OnChange="HandleJsonFileSelected" class="file-input" />
                            <small class="text-muted">Choose a previously exported board JSON file to import</small>
                        </div>
                    }
                    else if (isValidatingImport)
                    {
                        <div class="validation-progress">
                            <div class="progress-spinner"></div>
                            <p>Validating JSON file...</p>
                            <button type="button" class="btn btn-secondary" @onclick="ClearImportData">Cancel</button>
                        </div>
                    }
                    else
                    {
                        @if (importValidation != null)
                        {
                            <div class="import-preview">
                                <h4>Import Preview</h4>
                                <div class="preview-info">
                                    <div class="preview-item">
                                        <strong>Board Name:</strong> @importValidation.OriginalBoardName
                                    </div>
                                    <div class="preview-item">
                                        <strong>Elements:</strong> @importValidation.ElementCount
                                    </div>
                                    <div class="preview-item">
                                        <strong>Images:</strong> @importValidation.ImageCount
                                    </div>
                                    <div class="preview-item">
                                        <strong>Exported:</strong> @importValidation.ExportedAt?.ToString("yyyy-MM-dd HH:mm") by @importValidation.ExportedBy
                                    </div>
                                </div>

                                @if (importValidation.ValidationWarnings.Any())
                                {
                                    <div class="validation-warnings">
                                        <h5>⚠️ Warnings:</h5>
                                        @foreach (var warning in importValidation.ValidationWarnings)
                                        {
                                            <div class="warning-item">@warning</div>
                                        }
                                    </div>
                                }

                                @if (importValidation.ValidationErrors.Any())
                                {
                                    <div class="validation-errors">
                                        <h5>❌ Errors:</h5>
                                        @foreach (var error in importValidation.ValidationErrors)
                                        {
                                            <div class="error-item">@error</div>
                                        }
                                    </div>
                                }
                            </div>

                            @if (importValidation.IsValidJson && importValidation.HasRequiredFields)
                            {
                                <div class="form-group">
                                    <label>New Board Name (Optional)</label>
                                    <input type="text" @bind="importBoardName" placeholder="@($"{importValidation.OriginalBoardName} (Imported)")" />
                                    <small class="text-muted">Leave empty to use: "@importValidation.OriginalBoardName (Imported)"</small>
                                </div>
                                
                                <div class="form-group">
                                    <label>Board Visibility</label>
                                    <AuthorizeView>
                                        <Authorized>
                                            <div class="radio-group">
                                                <div class="radio-option @(importAccessLevel == BoardAccessLevel.Private ? "selected" : "")">
                                                    <label>
                                                        <input type="radio" name="importVisibility" @onchange="@(() => importAccessLevel = BoardAccessLevel.Private)" checked="@(importAccessLevel == BoardAccessLevel.Private)" />
                                                        <div class="radio-content">
                                                            <span class="radio-title">Private</span>
                                                            <small class="radio-description">Only you and invited collaborators</small>
                                                        </div>
                                                    </label>
                                                </div>
                                                <div class="radio-option @(importAccessLevel == BoardAccessLevel.Unlisted ? "selected" : "")">
                                                    <label>
                                                        <input type="radio" name="importVisibility" @onchange="@(() => importAccessLevel = BoardAccessLevel.Unlisted)" checked="@(importAccessLevel == BoardAccessLevel.Unlisted)" />
                                                        <div class="radio-content">
                                                            <span class="radio-title">Unlisted</span>
                                                            <small class="radio-description">Anyone with board ID</small>
                                                        </div>
                                                    </label>
                                                </div>
                                                <div class="radio-option @(importAccessLevel == BoardAccessLevel.Public ? "selected" : "")">
                                                    <label>
                                                        <input type="radio" name="importVisibility" @onchange="@(() => importAccessLevel = BoardAccessLevel.Public)" checked="@(importAccessLevel == BoardAccessLevel.Public)" />
                                                        <div class="radio-content">
                                                            <span class="radio-title">Public</span>
                                                            <small class="radio-description">Listed publicly</small>
                                                        </div>
                                                    </label>
                                                </div>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                            }

                            <div class="import-actions">
                                <button @onclick="ClearImportData">Choose Different File</button>
                            </div>
                        }
                        else if (isValidatingImport)
                        {
                            <div class="validation-loading">
                                <span>Validating JSON file...</span>
                            </div>
                        }
                    }
                </div>
            }
            
            <div class="modal-actions">
                <button @onclick="HideCreateModal">Cancel</button>
                @if (createModalTab == "new")
                {
                    <button @onclick="CreateNewBoard" disabled="@string.IsNullOrWhiteSpace(newBoardTitle)" class="primary">Create</button>
                }
                else if (createModalTab == "import")
                {
                    <button @onclick="ImportBoard" 
                            disabled="@(importValidation == null || !importValidation.IsValidJson || !importValidation.HasRequiredFields || importValidation.ValidationErrors.Any() || isImporting)" 
                            class="primary">
                        @if (isImporting)
                        {
                            <span>Importing...</span>
                        }
                        else
                        {
                            <span>Import Board</span>
                        }
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    
    private string newBoardTitle = "";
    private string selectedEmoji = "📋";
    private bool showEmojiPicker = false;
    private BoardAccessLevel selectedAccessLevel = BoardAccessLevel.Private;
    private bool showCreateModal = false;
    private bool showTemplateMenu = false;
    private bool showToast = false;
    private string toastMessage = "";
    private string errorMessage = "";
    private string activeTab = "my";
    private string searchQuery = "";
    private string sortOrder = "updated";
    
    // Import functionality variables
    private string createModalTab = "new";
    private InputFile? jsonFileInput;
    private string importJsonContent = "";
    private string importBoardName = "";
    private BoardAccessLevel importAccessLevel = BoardAccessLevel.Private;
    private ImportValidationResult? importValidation;
    private bool isValidatingImport = false;
    private bool isImporting = false;
    
    private List<WhiteboardApp.Models.Board>? publicBoards;
    private List<WhiteboardApp.Models.Board>? activeBoards;
    private List<WhiteboardApp.Models.Board>? userBoards;
    private List<BoardCollaborator>? collaborationBoards;
    private List<WhiteboardApp.Models.Board>? recentBoards;
    private List<WhiteboardApp.Models.Board>? displayedBoards;
    private User? currentUser;
    private HashSet<Guid> starredBoards = new();
    
    private readonly string[] availableEmojis = new[]
    {
        "📋", "📝", "🎨", "💡", "🚀", "⭐", "🎯", "🔥",
        "📊", "📈", "🗂️", "📌", "✨", "🌟", "💫", "🎪",
        "🎭", "🎨", "🖼️", "🖊️", "✏️", "🖍️", "🖌️", "📏"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            publicBoards = await BoardService.GetPublicBoardsAsync();
            activeBoards = await BoardService.GetActiveBoardsAsync();
        }
        catch (Exception ex)
        {
            // Log error but don't break the page
            Console.WriteLine($"Error loading boards: {ex.Message}");
            publicBoards = new List<WhiteboardApp.Models.Board>();
            activeBoards = new List<WhiteboardApp.Models.Board>();
        }
        
        // Load user's boards if authenticated
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try 
                {
                    currentUser = await UserService.GetOrCreateUserAsync(authState.User);
                    userBoards = await BoardService.GetUserOwnedBoardsAsync(currentUser);
                    collaborationBoards = currentUser.BoardCollaborations?.ToList() ?? new List<BoardCollaborator>();
                    
                    // Load recent boards using UserService
                    recentBoards = await UserService.GetUserRecentBoardsAsync(currentUser.Id, 5);
                    
                    // Set initial displayed boards
                    UpdateDisplayedBoards();
                }
                catch
                {
                    userBoards = null;
                    collaborationBoards = null;
                    recentBoards = null;
                }
            }
            else
            {
                activeTab = "public";
            }
        }
        else
        {
            activeTab = "public";
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        UpdateDisplayedBoards();
    }

    private void UpdateDisplayedBoards()
    {
        if (activeTab == "my")
        {
            var allMyBoards = new List<WhiteboardApp.Models.Board>();
            if (userBoards != null) allMyBoards.AddRange(userBoards);
            if (collaborationBoards != null) allMyBoards.AddRange(collaborationBoards.Select(c => c.Board));
            
            displayedBoards = allMyBoards
                .Where(FilterBoard)
                .OrderBy(b => sortOrder switch
                {
                    "alphabetical" => b.Name,
                    "created" => b.CreatedAt.ToString(),
                    _ => b.UpdatedAt.ToString()
                })
                .ToList();
                
            if (sortOrder == "updated" || sortOrder == "created")
            {
                displayedBoards.Reverse();
            }
        }
    }

    private bool FilterBoard(WhiteboardApp.Models.Board board)
    {
        if (string.IsNullOrEmpty(searchQuery)) return true;
        return board.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);
    }

    private void FilterBoards()
    {
        UpdateDisplayedBoards();
    }

    private void SortBoards()
    {
        UpdateDisplayedBoards();
    }

    private async Task CreateNewBoard()
    {
        if (string.IsNullOrWhiteSpace(newBoardTitle))
            return;

        User user;
        
        // Check if user is authenticated
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try 
                {
                    user = await UserService.GetOrCreateUserAsync(authState.User);
                }
                catch
                {
                    user = await UserService.GetAnonymousUserAsync();
                }
            }
            else
            {
                user = await UserService.GetAnonymousUserAsync();
            }
        }
        else
        {
            user = await UserService.GetAnonymousUserAsync();
        }

        var board = await BoardService.CreateBoardAsync(newBoardTitle.Trim(), user, selectedAccessLevel, selectedEmoji);
        
        // Refresh user boards list if user is authenticated
        if (user.SubjectId != "anonymous-user")
        {
            userBoards = await BoardService.GetUserOwnedBoardsAsync(user);
            currentUser = user;
            collaborationBoards = currentUser.BoardCollaborations?.ToList() ?? new List<BoardCollaborator>();
            
            // Refresh recent boards using UserService
            recentBoards = await UserService.GetUserRecentBoardsAsync(user.Id, 5);
            UpdateDisplayedBoards();
        }
        
        HideCreateModal();
        Navigation.NavigateTo($"/board/{board.Id}");
    }

    private async Task CreateFromTemplate(string template)
    {
        showTemplateMenu = false;
        // For now, just create a blank board with a template-specific emoji
        var templateEmoji = template switch
        {
            "kanban" => "📋",
            "retrospective" => "🔄",
            "flowchart" => "🔀",
            _ => "📝"
        };
        
        selectedEmoji = templateEmoji;
        newBoardTitle = $"{template.Substring(0, 1).ToUpper()}{template.Substring(1)} Board";
        ShowCreateModal();
        StateHasChanged(); // Ensure UI updates
    }

    private async Task OnBoardSelected(WhiteboardApp.Models.Board board)
    {
        await JoinSpecificBoard(board.Id);
    }

    private async Task OnDirectJoin(string boardIdentifier)
    {
        // Validate GUID format
        if (!Guid.TryParse(boardIdentifier, out var boardGuid))
        {
            errorMessage = "Invalid board ID format";
            return;
        }

        // Check if board exists and user can access it
        var board = await BoardService.GetBoardAsync(boardGuid);
        if (board == null)
        {
            errorMessage = "Board not found";
            return;
        }

        // Check access permissions
        var canAccess = board.AccessLevel == BoardAccessLevel.Public;
        
        if (!canAccess && AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try
                {
                    var user = await UserService.GetOrCreateUserAsync(authState.User);
                    canAccess = board.OwnerId == user.Id || 
                               board.Collaborators?.Any(c => c.UserId == user.Id) == true ||
                               board.AccessLevel == BoardAccessLevel.Unlisted;
                }
                catch
                {
                    // If user service fails, keep canAccess as false
                }
            }
        }

        if (!canAccess)
        {
            errorMessage = "Access denied to this board";
            return;
        }

        await JoinSpecificBoard(boardGuid);
    }

    private void OnSearchError(string error)
    {
        errorMessage = error;
        StateHasChanged();
    }

    private async Task JoinSpecificBoard(Guid id)
    {
        // Track board access for authenticated users
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                try
                {
                    var user = await UserService.GetOrCreateUserAsync(authState.User);
                    await BoardService.TrackBoardAccessAsync(user.Id, id, isJoin: false);
                    
                    // Refresh recent boards data so it's updated when user returns to home
                    recentBoards = await UserService.GetUserRecentBoardsAsync(user.Id, 5);
                }
                catch
                {
                    // Ignore tracking errors
                }
            }
        }

        Navigation.NavigateTo($"/board/{id}");
    }

    private void ShowCreateModal()
    {
        // Reset new board state
        newBoardTitle = "";
        selectedEmoji = "📋";
        selectedAccessLevel = BoardAccessLevel.Private;
        showEmojiPicker = false;
        
        // Reset import state
        createModalTab = "new";
        importJsonContent = "";
        importBoardName = "";
        importAccessLevel = BoardAccessLevel.Private;
        importValidation = null;
        isValidatingImport = false;
        isImporting = false;
        
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
        newBoardTitle = "";
        
        // Clear import state
        importJsonContent = "";
        importBoardName = "";
        importValidation = null;
        isValidatingImport = false;
        isImporting = false;
        selectedEmoji = "📋";
        selectedAccessLevel = BoardAccessLevel.Private;
        showEmojiPicker = false;
    }
    
    private void ToggleEmojiPicker()
    {
        showEmojiPicker = !showEmojiPicker;
    }
    
    private void SelectEmoji(string emoji)
    {
        selectedEmoji = emoji;
        showEmojiPicker = false;
    }

    private void ToggleTemplateMenu()
    {
        showTemplateMenu = false; // !showTemplateMenu;
    }


    private void ToggleStar(Guid boardId)
    {
        if (starredBoards.Contains(boardId))
        {
            starredBoards.Remove(boardId);
        }
        else
        {
            starredBoards.Add(boardId);
        }
    }

    private void ShareBoard(Guid boardId)
    {
        toastMessage = "Link copied";
        showToast = true;
        StateHasChanged();
        
        // Hide toast after 1.4 seconds
        Task.Delay(1400).ContinueWith(_ =>
        {
            showToast = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private string FormatDate(DateTime date)
    {
        var timeAgo = DateTime.UtcNow - date;
        if (timeAgo.TotalMinutes < 1) return "now";
        if (timeAgo.TotalHours < 1) return $"{(int)timeAgo.TotalMinutes}m ago";
        if (timeAgo.TotalDays < 1) return $"{(int)timeAgo.TotalHours}h ago";
        if (timeAgo.TotalDays < 7) return $"{(int)timeAgo.TotalDays}d ago";
        return date.ToString("M/d");
    }


    private string GetStickyCount(WhiteboardApp.Models.Board board)
    {
        var count = board.Elements?.Count ?? 0;
        return count == 1 ? "1 item" : $"{count} items";
    }

    private string GetElementCount(WhiteboardApp.Models.Board board)
    {
        var count = board.Elements?.Count ?? 0;
        return count == 1 ? "1 item" : $"{count} items";
    }

    private int GetCollaboratorCount(WhiteboardApp.Models.Board board)
    {
        var count = board.Collaborators?.Count ?? 0;
        return count;
    }

    private string GetAccessLevelClass(BoardAccessLevel level)
    {
        return level switch
        {
            BoardAccessLevel.Public => "public",
            BoardAccessLevel.Private => "private",
            BoardAccessLevel.Unlisted => "unlisted",
            _ => ""
        };
    }

    private string GetAccessLevelIcon(BoardAccessLevel level)
    {
        return level switch
        {
            BoardAccessLevel.Public => "🌐",
            BoardAccessLevel.Private => "🔒",
            BoardAccessLevel.Unlisted => "🔗",
            _ => ""
        };
    }

    private string GetAccessLevelText(BoardAccessLevel level)
    {
        return level switch
        {
            BoardAccessLevel.Public => "Public",
            BoardAccessLevel.Private => "Private",
            BoardAccessLevel.Unlisted => "Unlisted",
            _ => ""
        };
    }

    // Import functionality methods
    private async Task HandleJsonFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            // Check file size (10MB limit)
            if (file.Size > 10 * 1024 * 1024)
            {
                await ShowToast("File too large. Maximum size is 10MB.");
                return;
            }

            // Check file extension
            if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                await ShowToast("Please select a JSON file.");
                return;
            }

            isValidatingImport = true;
            StateHasChanged();

            // Read file content
            using var reader = new StreamReader(file.OpenReadStream(10 * 1024 * 1024));
            importJsonContent = await reader.ReadToEndAsync();

            // Validate the JSON
            await ValidateImportJson();
        }
        catch (Exception ex)
        {
            await ShowToast($"Error reading file: {ex.Message}");
            ClearImportData();
        }
        finally
        {
            isValidatingImport = false;
            StateHasChanged();
        }
    }

    private async Task ValidateImportJson()
    {
        try
        {
            // Call the import service directly instead of using HTTP
            importValidation = await ImportService.ValidateImportDataAsync(importJsonContent);
            
            // Show user feedback based on validation results
            if (importValidation != null)
            {
                if (!importValidation.IsValidJson || !importValidation.HasRequiredFields)
                {
                    var errorMessages = string.Join(", ", importValidation.ValidationErrors);
                    await ShowToast($"JSON validation failed: {errorMessages}");
                }
                else if (importValidation.ValidationWarnings.Any())
                {
                    await ShowToast($"JSON validated with {importValidation.ValidationWarnings.Count} warnings");
                }
                else
                {
                    await ShowToast("JSON validated successfully");
                }
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowToast($"Validation error: {ex.Message}");
            
            // Create a failed validation result instead of clearing data
            importValidation = new ImportValidationResult
            {
                IsValidJson = false,
                HasRequiredFields = false,
                ValidationErrors = new List<string> { $"Validation error: {ex.Message}" }
            };
            StateHasChanged();
        }
    }

    private async Task ImportBoard()
    {
        try
        {
            if (importValidation == null) return;

            isImporting = true;
            StateHasChanged();

            // Get current user for authentication
            if (AuthenticationStateTask == null)
            {
                await ShowToast("Authentication required for import");
                return;
            }

            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                await ShowToast("Please log in to import boards");
                return;
            }

            var currentUser = await UserService.GetOrCreateUserAsync(authState.User);
            
            var importOptions = new BoardImportOptions
            {
                ValidateHash = true,
                NewBoardName = string.IsNullOrWhiteSpace(importBoardName) ? null : importBoardName,
                NewBoardEmoji = null,
                NewAccessLevel = importAccessLevel,
                CreateNewIds = true,
                PreserveTimestamps = false,
                ProcessImages = true,
                MaxImageSizeMB = 10
            };

            // Call the import service directly
            var result = await ImportService.ImportBoardAsync(importJsonContent, currentUser, importOptions);

            if (result?.Success == true && result.BoardId.HasValue)
            {
                await ShowToast($"Board imported successfully! {result.Message}");
                
                // Refresh boards list
                userBoards = await BoardService.GetUserOwnedBoardsAsync(currentUser);
                UpdateDisplayedBoards();

                HideCreateModal();
                
                // Navigate to the new board
                Navigation.NavigateTo($"/board/{result.BoardId}");
            }
            else
            {
                var errorMsg = result?.Message ?? "Import failed";
                if (result?.Errors?.Any() == true)
                {
                    errorMsg += ": " + string.Join(", ", result.Errors);
                }
                await ShowToast(errorMsg);
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Import error: {ex.Message}");
        }
        finally
        {
            isImporting = false;
            StateHasChanged();
        }
    }

    private void ClearImportData()
    {
        importJsonContent = "";
        importBoardName = "";
        importValidation = null;
        isValidatingImport = false;
        isImporting = false;
        StateHasChanged();
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        
        // Hide toast after 5 seconds
        await Task.Delay(5000);
        showToast = false;
        StateHasChanged();
    }
}
