@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

<link href="css/components.css" rel="stylesheet" />

<div class="user-menu">
    <AuthorizeView>
        <Authorized>
            <div class="user-info">
                <span class="user-avatar">
                    @if (!string.IsNullOrEmpty(context.User.FindFirst("name")?.Value))
                    {
                        @GetInitials(context.User.FindFirst("name")?.Value ?? "")
                    }
                    else
                    {
                        <i class="fas fa-user"></i>
                    }
                </span>
                <div class="user-details">
                    <span class="user-name">
                        @(context.User.FindFirst("name")?.Value ?? 
                          context.User.FindFirst("preferred_username")?.Value ?? 
                          context.User.FindFirst("email")?.Value ?? "User")
                    </span>
                    <span class="user-email">
                        @(context.User.FindFirst("email")?.Value ?? "")
                    </span>
                </div>
                <div class="user-actions">
                    <button class="btn btn-outline-secondary btn-sm" @onclick="ShowUserMenu">
                        <i class="fas fa-chevron-down"></i>
                    </button>
                </div>
            </div>
            
            @if (showDropdown)
            {
                <div class="user-dropdown">
                    <div class="dropdown-header">
                        <strong>@(context.User.FindFirst("name")?.Value ?? "User")</strong>
                        <small class="text-muted">@(context.User.FindFirst("email")?.Value ?? "")</small>
                    </div>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="/profile">
                        <i class="fas fa-user-circle"></i> Profile
                    </a>
                    <a class="dropdown-item" href="/">
                        <i class="fas fa-clipboard-list"></i> My Boards
                    </a>
                    <div class="dropdown-divider"></div>
                    <button class="dropdown-item" @onclick="Logout">
                        <i class="fas fa-sign-out-alt"></i> Sign Out
                    </button>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="auth-actions">
                <button class="btn btn-primary" @onclick="Login">
                    <i class="fas fa-sign-in-alt"></i> Sign In
                </button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private bool showDropdown = false;

    private void Login()
    {
        var returnUrl = Uri.EscapeDataString(Navigation.Uri);
        Navigation.NavigateTo($"/Account/Login?returnUrl={returnUrl}", forceLoad: true);
    }

    private void Logout()
    {
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private void ShowUserMenu()
    {
        showDropdown = !showDropdown;
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";
        
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        else if (parts.Length == 1)
        {
            return parts[0].Length >= 2 ? parts[0].Substring(0, 2).ToUpper() : parts[0][0].ToString().ToUpper();
        }
        return "?";
    }

    // Close dropdown when clicking outside
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.CompletedTask;
        }
    }
}