@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <div class="avatar" @onclick="ShowUserMenu" style="cursor: pointer;" title="@(context.User.FindFirst("name")?.Value ?? "User")">
            @if (!string.IsNullOrEmpty(context.User.FindFirst("name")?.Value))
            {
                @GetInitials(context.User.FindFirst("name")?.Value ?? "")
            }
            else
            {
                @GetInitials("User")
            }
        </div>
        
        @if (showDropdown)
        {
            <div class="user-dropdown" style="position: absolute; top: 100%; right: 0; z-index: 1000; margin-top: 8px; min-width: 220px; background: var(--surface); border: 1px solid var(--chip-border); border-radius: var(--radius-md); box-shadow: var(--shadow-2); padding: 6px;">
                <div style="padding: 12px 14px; border-bottom: 1px solid var(--chip-border);">
                    <div style="font-weight: var(--font-weight-semibold); color: var(--text);">@(context.User.FindFirst("name")?.Value ?? "User")</div>
                    <div style="font-size: var(--font-size-sm); color: var(--text-dim); margin-top: 2px;">@(context.User.FindFirst("email")?.Value ?? "")</div>
                </div>
                <div style="padding: 6px;">
                    <a href="/profile" style="display: block; width: 100%; text-align: left; padding: 10px; border-radius: var(--radius-sm); background: none; border: none; color: var(--text); cursor: pointer; text-decoration: none; transition: background 0.2s ease;" 
                       onmouseover="this.style.background='var(--muted)'" onmouseout="this.style.background='none'">
                        Profile
                    </a>
                    <a href="/" style="display: block; width: 100%; text-align: left; padding: 10px; border-radius: var(--radius-sm); background: none; border: none; color: var(--text); cursor: pointer; text-decoration: none; transition: background 0.2s ease;"
                       onmouseover="this.style.background='var(--muted)'" onmouseout="this.style.background='none'">
                        My Boards
                    </a>
                    <div style="height: 1px; background: var(--chip-border); margin: 6px 0;"></div>
                    <button type="button" @onclick="Logout" style="display: block; width: 100%; text-align: left; padding: 10px; border-radius: var(--radius-sm); background: none; border: none; color: var(--text); cursor: pointer; transition: background 0.2s ease;"
                            onmouseover="this.style.background='var(--muted)'" onmouseout="this.style.background='none'">
                        Sign Out
                    </button>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-primary" @onclick="Login" style="font-size: var(--font-size-sm); padding: 8px 12px;">
            Sign In
        </button>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool showDropdown = false;

    private void Login()
    {
        var returnUrl = Uri.EscapeDataString(Navigation.Uri);
        Navigation.NavigateTo($"/Account/Login?returnUrl={returnUrl}", forceLoad: true);
    }

    private void Logout()
    {
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private void ShowUserMenu()
    {
        showDropdown = !showDropdown;
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";
        
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        else if (parts.Length == 1)
        {
            return parts[0].Length >= 2 ? parts[0].Substring(0, 2).ToUpper() : parts[0][0].ToString().ToUpper();
        }
        return "?";
    }

    // Close dropdown when clicking outside
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.CompletedTask;
        }
    }
}