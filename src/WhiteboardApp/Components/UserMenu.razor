@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <div class="avatar" @onclick="ShowUserMenu" style="cursor: pointer;" title="@(context.User.FindFirst("name")?.Value ?? "User")">
            @if (!string.IsNullOrEmpty(context.User.FindFirst("name")?.Value))
            {
                @GetInitials(context.User.FindFirst("name")?.Value ?? "")
            }
            else
            {
                @GetInitials("User")
            }
        </div>
        
        @if (showDropdown)
        {
            <div class="user-dropdown" @onclick:stopPropagation="true">
                <div class="user-dropdown-header">
                    <div class="user-dropdown-name">@(context.User.FindFirst("name")?.Value ?? "User")</div>
                    <div class="user-dropdown-email">@(context.User.FindFirst("email")?.Value ?? "")</div>
                </div>
                <div class="user-dropdown-menu">
                    <a href="/profile" class="user-dropdown-item">
                        Profile
                    </a>
                    <!-- <a href="/" class="user-dropdown-item">
                        My Boards
                    </a> -->
                    <div class="user-dropdown-divider"></div>
                    <button type="button" @onclick="Logout" class="user-dropdown-item">
                        Sign Out
                    </button>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-primary" @onclick="Login" style="font-size: var(--font-size-sm); padding: 8px 12px;">
            Sign In
        </button>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool showDropdown = false;
    private DotNetObjectReference<UserMenu>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("window.setupUserMenuClickOutside", dotNetRef);
        }
    }

    [JSInvokable]
    public void CloseDropdown()
    {
        if (showDropdown)
        {
            showDropdown = false;
            StateHasChanged();
        }
    }

    private void Login()
    {
        var returnUrl = Uri.EscapeDataString(Navigation.Uri);
        Navigation.NavigateTo($"/Account/Login?returnUrl={returnUrl}", forceLoad: true);
    }

    private void Logout()
    {
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private async Task ShowUserMenu()
    {
        showDropdown = !showDropdown;
        if (showDropdown)
        {
            await JSRuntime.InvokeVoidAsync("window.setUserMenuOpen", true);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("window.setUserMenuOpen", false);
        }
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";
        
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        else if (parts.Length == 1)
        {
            return parts[0].Length >= 2 ? parts[0].Substring(0, 2).ToUpper() : parts[0][0].ToString().ToUpper();
        }
        return "?";
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
